#
# Special Notes
#
# Mypy can't infer ParserTarget subscript from variable assignment,
# it only checks for existance of methods, so no test can be done
# for correctness of subscript type.
#

- case: include_files
  skip: True
  files: &INC
    - path: mytarget.py
      content: |
        from typing import List, Optional
        from lxml.etree import ParserTarget
        class Target1(ParserTarget):
          def start(self, tag, attrib) -> None: ...
          def close(self) -> str:
            return ''
        class Target2(ParserTarget):
          def start(self, tag, attrib, nsmap) -> None: ...
          def close(self) -> Optional[List[str]]: ...
  main:

- case: inherit_ok
  parametrized:
    - cls: Target1
    - cls: Target2
  files: *INC
  main: |
    import mytarget
    target = mytarget.{{ cls }}()

# Error in inheriting incompatible superclass
- case: inherit_fail
  expect_fail: true
  files:
    - path: badtarget.py
      content: |
        from lxml.etree import ParserTarget
        class NonTarget1(ParserTarget):
          def start(self) -> int: ...  # wrong return type
          def close(self) -> str: ...
        class NonTarget2(ParserTarget):
          def start(self, tag, attrib) -> None: ...
          def close(self, extra) -> str: ...  # extraneous arg
  parametrized:
    - cls: NonTarget1
    - cls: NonTarget2
  main: |
    import badtarget
    target = badtarget.{{ cls }}()

- case: subscript_from_target_arg
  parametrized:
    - parser: XMLParser
    - parser: HTMLParser
    - parser: XMLPullParser
    - parser: HTMLPullParser
    - parser: ETCompatXMLParser
  main: |
    from typing import List, Optional
    from lxml import etree
    t1: etree.ParserTarget[str]
    t2: etree.ParserTarget[Optional[List[str]]]
    reveal_type(etree.{{ parser }}(target=t1))  # N: Revealed type is "lxml.etree._parser.{{ parser }}[builtins.str]"
    reveal_type(etree.{{ parser }}(target=t2))  # N: Revealed type is "lxml.etree._parser.{{ parser }}[Union[builtins.list[builtins.str], None]]"
    reveal_type(etree.{{ parser }}(target=None))  # N: Revealed type is "lxml.etree._parser.{{ parser }}[lxml.etree._Element]"
    reveal_type(etree.{{ parser }}(target=etree.TreeBuilder()))  # N: Revealed type is "lxml.etree._parser.{{ parser }}[lxml.etree._Element]"
    reveal_type(etree.{{ parser }}())  # N: Revealed type is "lxml.etree._parser.{{ parser }}[lxml.etree._Element]"

- case: custom_feedparser_close
  parametrized:
    - parser: etree.XMLParser
    - parser: etree.HTMLParser
  main: |
    from typing import List, Optional
    from lxml import etree
    p1: {{ parser }}[Optional[List[str]]]
    p2: {{ parser }}[etree._Element]
    reveal_type(p1.close())  # N: Revealed type is "Union[builtins.list[builtins.str], None]"
    reveal_type(p2.close())  # NR: .+ "[\w\.]+\._Element"$

- case: et_factory
  parametrized:
    - args: "file=filename, parser=p1"
      rt: "builtins.str"
    - args: "file=fileio, parser=p2"
      rt: "builtins.list[builtins.str]"
    - args: "file=filename, parser=p3"
      rt: "lxml.etree._Element"
    - args: "file=fileio, parser=p4"
      rt: "lxml.etree._Element"
    - args: "parser=p3"
      rt: "lxml.etree._ElementTree[lxml.etree._Element]"
    - args: "file=None, parser=p4"
      rt: "lxml.etree._ElementTree[lxml.etree._Element]"
  main: |
    from typing import List
    from lxml import etree
    filename: str
    fileio = open(filename, 'r')
    p1: etree.XMLParser[str]
    p2: etree.HTMLParser[List[str]]
    p3: etree.XMLParser[etree._Element]
    p4: etree.HTMLParser[etree._Element]
    reveal_type(etree.ElementTree({{ args }}))  # N: Revealed type is "{{ rt }}"

- case: et_factory_badarg
  expect_fail: true
  parametrized:
    - args: "elem, parser=p4"
    - args: "parser=p1"
  main: |
    from lxml import etree
    elem: etree._Element
    p1: etree.XMLParser[str]
    p2: etree.HTMLParser[List[str]]
    p3: etree.XMLParser[etree._Element]
    p4: etree.HTMLParser[etree._Element]
    result = etree.ElementTree({{ args }})

- case: fromstring
  parametrized:
    - args: "doc, p1"
      rt: "builtins.str"
    - args: "doc, parser=p2"
      rt: "builtins.list[builtins.str]"
    - args: "text=doc, parser=p3"
      rt: "lxml.etree._Element"
  main: |
    from typing import List
    from lxml import etree
    doc: str
    p1: etree.XMLParser[str]
    p2: etree.HTMLParser[List[str]]
    p3: etree.XMLParser[etree._Element]
    p4: etree.HTMLParser[etree._Element]
    reveal_type(etree.fromstring({{ args }}))  # N: Revealed type is "{{ rt }}"

- case: fromstring_family
  parametrized:
    - func: XML
      args: "doc, p1"
      rt: "builtins.str"
    - func: HTML
      args: "doc, p2"
      rt: "builtins.list[builtins.str]"
    - func: XML
      args: "text=doc, parser=p3"
      rt: "lxml.etree._Element"
    - func: HTML
      args: "text=doc, parser=p4"
      rt: "lxml.etree._Element"
  main: |
    from typing import List
    from lxml import etree
    doc: str
    p1: etree.XMLParser[str]
    p2: etree.HTMLParser[List[str]]
    p3: etree.XMLParser[etree._Element]
    p4: etree.HTMLParser[etree._Element]
    reveal_type(etree.{{ func }}({{ args }}))  # N: Revealed type is "{{ rt }}"

- case: combined
  files: *INC
  main: |
    from typing import cast, List
    from mytarget import Target2
    from lxml import etree
    t = cast("etree.ParserTarget[List[str]]", Target2())
    reveal_type(t)  # N: Revealed type is "lxml.etree._parser.ParserTarget[builtins.list[builtins.str]]"
    p = etree.XMLParser(target=t)
    reveal_type(p)  # N: Revealed type is "lxml.etree._parser.XMLParser[builtins.list[builtins.str]]"
    content: str
    p.feed(content)
    result = p.close()
    reveal_type(result)  # N: Revealed type is "builtins.list[builtins.str]"
    root = etree.fromstring(content, parser=p)
    reveal_type(root)  # N: Revealed type is "builtins.list[builtins.str]"
