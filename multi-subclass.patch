 pyproject.toml                         |  2 +-
 src/lxml-stubs/etree/_element.pyi      | 76 +++++++++++++++++-----------------
 src/lxml-stubs/etree/_factory_func.pyi |  6 +--
 src/lxml-stubs/html/_element.pyi       | 35 +++++++++-------
 src/lxml-stubs/objectify/_element.pyi  | 10 +++--
 tests/runtime/conftest.py              |  2 +-
 6 files changed, 68 insertions(+), 63 deletions(-)

diff --git a/pyproject.toml b/pyproject.toml
index 4e160eb..eb9c890 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -5,7 +5,7 @@ requires = ['pdm-backend ~= 2.3']
 build-backend = 'pdm.backend'
 
 [project]
-name = 'types-lxml'
+name = 'types-lxml-multi-subclass'
 dynamic = ['version']
 description = 'Complete lxml external type annotation'
 readme = 'README.md'
diff --git a/src/lxml-stubs/etree/_element.pyi b/src/lxml-stubs/etree/_element.pyi
index 9544f58..a8a60c6 100644
--- a/src/lxml-stubs/etree/_element.pyi
+++ b/src/lxml-stubs/etree/_element.pyi
@@ -14,9 +14,9 @@ from typing import (
 )
 
 if sys.version_info >= (3, 11):
-    from typing import Never, Self
+    from typing import Never
 else:
-    from typing_extensions import Never, Self
+    from typing_extensions import Never
 
 if sys.version_info >= (3, 13):
     from warnings import deprecated
@@ -76,34 +76,34 @@ class _Element:
     #
     def __delitem__(self, __k: int | slice) -> None: ...
     @overload
-    def __getitem__(self, __x: int) -> Self: ...
+    def __getitem__(self, __x: int) -> _Element: ...
     @overload
-    def __getitem__(self, __x: slice) -> list[Self]: ...
+    def __getitem__(self, __x: slice) -> list[_Element]: ...
     @overload
-    def __setitem__(self, __x: int, __v: Self) -> None: ...
-    # Not using Iterable[Self] here. Note that an element itself
+    def __setitem__(self, __x: int, __v: _Element) -> None: ...
+    # Not using Iterable here. Note that an element itself
     # is considered an Iterable; when used with __setitem__()
     # like elem[:] = new_elem, only subelements within new_elem
     # will be inserted, but not new_elem itself. If there is none,
     # the whole slice would be silently deleted. Though permitted
     # in runtime, this is not an expected behavior.
     @overload
-    def __setitem__(self, __x: slice, __v: Sequence[Self]) -> None: ...
+    def __setitem__(self, __x: slice, __v: Sequence[_Element]) -> None: ...
     def __contains__(self, __o: object) -> bool: ...
     def __len__(self) -> int: ...
     # There are a hoard of element iterators used in lxml, but
     # they only differ in implementation detail and don't affect typing.
-    def __iter__(self) -> Iterator[Self]: ...
-    def __reversed__(self) -> Iterator[Self]: ...
+    def __iter__(self) -> Iterator[_Element]: ...
+    def __reversed__(self) -> Iterator[_Element]: ...
     def set(self, key: _t._AttrName, value: _t._AttrVal) -> None: ...
-    def append(self, element: Self) -> None: ...
+    def append(self, element: _Element) -> None: ...
     # for extend() argument, see __setitem__() for explanation
-    def extend(self, elements: Sequence[Self]) -> None: ...
+    def extend(self, elements: Sequence[_Element]) -> None: ...
     def clear(self, keep_tail: bool = False) -> None: ...
-    def insert(self, index: int, element: Self) -> None: ...
-    def remove(self, element: Self) -> None: ...
+    def insert(self, index: int, element: _Element) -> None: ...
+    def remove(self, element: _Element) -> None: ...
     def index(
-        self, child: Self, start: int | None = None, end: int | None = None
+        self, child: _Element, start: int | None = None, end: int | None = None
     ) -> int: ...
     @overload
     def get(self, key: _t._AttrName) -> str | None: ...
@@ -115,53 +115,53 @@ class _Element:
     #
     # extra Element / ET methods
     #
-    def addnext(self, element: Self) -> None: ...
-    def addprevious(self, element: Self) -> None: ...
-    def replace(self, old_element: Self, new_element: Self) -> None: ...
-    def getparent(self) -> Self | None: ...
-    def getnext(self) -> Self | None: ...
-    def getprevious(self) -> Self | None: ...
-    def getroottree(self) -> _ElementTree[Self]: ...
+    def addnext(self, element: _Element) -> None: ...
+    def addprevious(self, element: _Element) -> None: ...
+    def replace(self, old_element: _Element, new_element: _Element) -> None: ...
+    def getparent(self) -> _Element | None: ...
+    def getnext(self) -> _Element | None: ...
+    def getprevious(self) -> _Element | None: ...
+    def getroottree(self) -> _ElementTree[_Element]: ...
     @overload
     def itersiblings(
         self, *tags: _t._TagSelector, preceding: bool = False
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def itersiblings(
         self,
         tag: _t._TagSelector | Collection[_t._TagSelector] | None = None,
         *,
         preceding: bool = False,
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iterancestors(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iterancestors(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iterancestors(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iterdescendants(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iterdescendants(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iterdescendants(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def iterchildren(
         self, *tags: _t._TagSelector, reversed: bool = False
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def iterchildren(
         self,
         tag: _t._TagSelector | Collection[_t._TagSelector] | None = None,
         *,
         reversed: bool = False,
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iter(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iter(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iter(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def itertext(
         self, *tags: _t._TagSelector, with_tail: bool = True
@@ -173,10 +173,10 @@ class _Element:
         *,
         with_tail: bool = True,
     ) -> Iterator[str]: ...
-    makeelement: _t._ElementFactory[Self]
+    makeelement: _t._ElementFactory[_Element]
     def find(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> Self | None: ...
+    ) -> _Element | None: ...
     # Original method has no star. If somebody only supplies
     # 'path' and 'default' argument as positional one, it
     # would be misinterpreted as namespaces argument in first
@@ -197,10 +197,10 @@ class _Element:
     ) -> str | _T: ...
     def findall(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> list[Self]: ...
+    ) -> list[_Element]: ...
     def iterfind(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     def xpath(
         self,
         _path: _t._AnyStr,
@@ -216,15 +216,15 @@ class _Element:
         expr: str,
         *,
         translator: _CSSTransArg = "xml",
-    ) -> list[Self]: ...
+    ) -> list[_Element]: ...
     @deprecated("Since v2.0 (2008); use list(element) or iterate over element")
-    def getchildren(self) -> list[Self]: ...
+    def getchildren(self) -> list[_Element]: ...
     # Should have been overloaded for accuracy, but we can turn a blind eye
     # for something that is marked deprecated for 15 years
     @deprecated("Since v2.0 (2008); renamed to .iter()")
     def getiterator(
         self, tag: _t._TagSelector | None = None, *tags: _t._TagSelector
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
 
 # ET class notation is specialized, indicating the type of element
 # it is holding (e.g. XML element, HTML element or Objectified
diff --git a/src/lxml-stubs/etree/_factory_func.pyi b/src/lxml-stubs/etree/_factory_func.pyi
index 08fe9bc..36cfe3f 100644
--- a/src/lxml-stubs/etree/_factory_func.pyi
+++ b/src/lxml-stubs/etree/_factory_func.pyi
@@ -13,7 +13,7 @@ from .._types import (
 )
 from ..html import HtmlElement
 from ..objectify import ObjectifiedElement, StringElement
-from ._element import _Comment, _ElementTree, _Entity, _ProcessingInstruction
+from ._element import _Comment, _Element, _ElementTree, _Entity, _ProcessingInstruction
 
 def Comment(text: str | bytes | bytearray | None = None) -> _Comment: ...
 def ProcessingInstruction(
@@ -60,13 +60,13 @@ def SubElement(
 ) -> HtmlElement: ...
 @overload
 def SubElement(
-    _parent: _ET,
+    _parent: _Element,
     _tag: _TagName,
     /,
     attrib: _AttrMapping | None = None,
     nsmap: _NSMapArg | None = None,
     **_extra: _AttrVal,
-) -> _ET: ...
+) -> _Element: ...
 @overload  # from element, parser ignored
 def ElementTree(element: _ET) -> _ElementTree[_ET]: ...
 @overload  # from file source, custom parser
diff --git a/src/lxml-stubs/html/_element.pyi b/src/lxml-stubs/html/_element.pyi
index 58998eb..4d09668 100644
--- a/src/lxml-stubs/html/_element.pyi
+++ b/src/lxml-stubs/html/_element.pyi
@@ -128,26 +128,29 @@ class HtmlElement(etree.ElementBase):
     # Subclassing of _Element should not go beyond HtmlElement. For example,
     # while children of HtmlElement are mostly HtmlElement, FormElement never
     # contains FormElement as child.
-    @overload
+    @overload  # type: ignore[override]
     def __getitem__(self, __x: int) -> HtmlElement: ...
     @overload
-    def __getitem__(self, __x: slice) -> list[HtmlElement]: ...
-    @overload
+    def __getitem__(self, __x: slice) -> list[HtmlElement]: ...  # pyright: ignore[reportIncompatibleMethodOverride]
+    @overload  # type: ignore[override]
     def __setitem__(self, __x: int, __v: HtmlElement) -> None: ...
     @overload
-    def __setitem__(self, __x: slice, __v: Sequence[HtmlElement]) -> None: ...
+    def __setitem__(self, __x: slice, __v: Sequence[HtmlElement]) -> None: ...  # pyright: ignore[reportIncompatibleMethodOverride]
     def __iter__(self) -> Iterator[HtmlElement]: ...
     def __reversed__(self) -> Iterator[HtmlElement]: ...
-    def append(self, element: HtmlElement) -> None: ...
-    def extend(self, elements: Sequence[HtmlElement]) -> None: ...
-    def insert(self, index: int, element: HtmlElement) -> None: ...
-    def remove(self, element: HtmlElement) -> None: ...
-    def index(
-        self, child: HtmlElement, start: int | None = None, end: int | None = None
+    def append(self, element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def extend(self, elements: Sequence[HtmlElement]) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def insert(self, index: int, element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def remove(self, element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def index(  # pyright: ignore[reportIncompatibleMethodOverride]
+        self,
+        child: HtmlElement,  # type: ignore[override]
+        start: int | None = None,
+        end: int | None = None,
     ) -> int: ...
-    def addnext(self, element: HtmlElement) -> None: ...
-    def addprevious(self, element: HtmlElement) -> None: ...
-    def replace(self, old_element: HtmlElement, new_element: HtmlElement) -> None: ...
+    def addnext(self, element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def addprevious(self, element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
+    def replace(self, old_element: HtmlElement, new_element: HtmlElement) -> None: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
     def getparent(self) -> HtmlElement | None: ...
     def getnext(self) -> HtmlElement | None: ...
     def getprevious(self) -> HtmlElement | None: ...
@@ -203,17 +206,17 @@ class HtmlElement(etree.ElementBase):
         *,
         with_tail: bool = True,
     ) -> Iterator[str]: ...
-    makeelement: _ElementFactory[HtmlElement]
+    makeelement: _ElementFactory[HtmlElement]  # pyright: ignore[reportIncompatibleVariableOverride]
     def find(
         self, path: _ElemPathArg, namespaces: _StrictNSMap | None = None
     ) -> HtmlElement | None: ...
-    def findall(
+    def findall(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self, path: _ElemPathArg, namespaces: _StrictNSMap | None = None
     ) -> list[HtmlElement]: ...
     def iterfind(
         self, path: _ElemPathArg, namespaces: _StrictNSMap | None = None
     ) -> Iterator[HtmlElement]: ...
-    def cssselect(
+    def cssselect(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         expr: str,
         *,
diff --git a/src/lxml-stubs/objectify/_element.pyi b/src/lxml-stubs/objectify/_element.pyi
index 8ef012e..d8948d2 100644
--- a/src/lxml-stubs/objectify/_element.pyi
+++ b/src/lxml-stubs/objectify/_element.pyi
@@ -50,7 +50,7 @@ class ObjectifiedElement(ElementBase):
     def addattr(self, tag: _TagName, value: object) -> None: ...
     def countchildren(self) -> int: ...
     def descendantpaths(self, prefix: str | list[str] | None = None) -> list[str]: ...
-    def getchildren(self) -> list[ObjectifiedElement]: ...
+    def getchildren(self) -> list[ObjectifiedElement]: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
     def __iter__(self) -> Iterator[ObjectifiedElement]: ...
     def __reversed__(self) -> Iterator[ObjectifiedElement]: ...
     def __getattr__(self, __name: str) -> ObjectifiedElement: ...
@@ -59,10 +59,12 @@ class ObjectifiedElement(ElementBase):
     def __delattr__(self, __name: str) -> None: ...
     # elem['foo'] is equivalent to elem.foo, but allows for
     # special attribute names (like 'text' or 'tail')
-    @overload
+    @overload  # type: ignore[override]
     def __getitem__(self, key: int | str | bytes, /) -> ObjectifiedElement: ...
     @overload
-    def __getitem__(self, key: slice, /) -> list[ObjectifiedElement]: ...
+    def __getitem__(  # pyright: ignore[reportIncompatibleMethodOverride]
+        self, key: slice, /
+    ) -> list[ObjectifiedElement]: ...
     @overload
     def __setitem__(self, key: int | str | bytes, value: object, /) -> None: ...
     @overload
@@ -71,7 +73,7 @@ class ObjectifiedElement(ElementBase):
     # TODO Check if _Element methods need overriding
     # CSS selector is not a normal use case for objectified
     # element (and unnecessary), but still usable nonetheless
-    def cssselect(
+    def cssselect(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         expr: str,
         *,
diff --git a/tests/runtime/conftest.py b/tests/runtime/conftest.py
index fde7a18..c5e8326 100644
--- a/tests/runtime/conftest.py
+++ b/tests/runtime/conftest.py
@@ -21,7 +21,7 @@ is_multi_subclass_build = pytest.StashKey[bool]()
 
 
 def pytest_configure(config: pytest.Config) -> None:
-    config.stash[is_multi_subclass_build] = False
+    config.stash[is_multi_subclass_build] = True
 
 
 def _bightml_filepath() -> Path:
