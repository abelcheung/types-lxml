- case: etree_from_string_returns_element
  main: |
    from lxml import etree
    document = etree.fromstring("<doc></doc>")
    reveal_type(document)  # N: Revealed type is "lxml.etree._Element"

- case: etree_xmlparser_makeelement
  main: |
    from lxml import etree
    parser = etree.XMLParser()
    element = parser.makeelement("foobar")
    reveal_type(element)  # N: Revealed type is "lxml.etree._Element"

- case: etree_htmlparser_makeelement
  main: |
    from lxml import etree
    parser = etree.HTMLParser()
    element = parser.makeelement("foobar")
    reveal_type(element)  # N: Revealed type is "lxml.etree._Element"

- case: etree_tostring_encoding_default_or_type
  parametrized:
    - kwd: elem
      rt: builtins.bytes
    - kwd: "elem, encoding=str"
      rt: builtins.str
  main: |
    from lxml import etree
    elem: etree._Element
    string = etree.tostring({{ kwd }})
    reveal_type(string)  # N: Revealed type is "{{ rt }}"

- case: etree_tostring_encoding_specific
  parametrized:
    - val: ascii
      rt: builtins.bytes
    - val: utf8
      rt: builtins.bytes
    - val: unknown_encoding
      rt: Union[builtins.str, builtins.bytes]
    - val: unicode
      rt: builtins.str
  main: |
    from lxml import etree
    string = etree.tostring(etree.Element("foo"), encoding="{{ val }}")
    reveal_type(string)  # N: Revealed type is "{{ rt }}"

- case: etree_HTML_returns_element
  main: |
    from lxml import etree
    document = etree.HTML("<doc></doc>", parser=etree.HTMLParser(), base_url="http://example.com/")
    reveal_type(document)  # N: Revealed type is "lxml.etree._Element*"

- case: etree_XML_returns_element
  main: |
    from lxml import etree
    document = etree.XML("<doc></doc>", parser=etree.XMLParser(), base_url="http://example.com/")
    reveal_type(document)  # N: Revealed type is "lxml.etree._Element*"

- case: etree_pyerrorlog_object
  main: |
    from lxml import etree
    obj = etree.PyErrorLog()
    reveal_type(obj)  # N: Revealed type is "lxml.etree._xmlerror.PyErrorLog"
    reveal_type(obj.level_map)  # N: Revealed type is "builtins.dict[builtins.int, builtins.int]"

- case: etree_error_log_struct
  main: |
    from lxml import etree
    parser: etree.XMLParser
    s: str
    document = etree.XML(s, parser=parser)
    last_err = parser.error_log.last_error
    reveal_type(last_err.level)  # N: Revealed type is "builtins.int"
    reveal_type(last_err.filename)  # N: Revealed type is "Union[builtins.str, None]"

- case: qname_create_ok
  parametrized:
    - kwds: tagname
    - kwds: text_or_uri_or_element=qn
    - kwds: el
    - kwds: None, tagname
    - kwds: None, tag=qn
  main: |
    from lxml.etree import QName, _Element
    tagname: str
    el: _Element
    qn: QName
    result = QName({{ kwds }})
    reveal_type(result)  # N: Revealed type is "lxml.etree.QName"

- case: qname_create_fail
  expect_fail: true
  parametrized:
    - kwds: null
    - kwds: None
    - kwds: 1
    - kwds: None, 1
  main: |
    from lxml.etree import QName
    result = QName({{ kwds }})

- case: qname_properties
  parametrized:
    - prop: namespace
      rt: Union[builtins.str, None]
    - prop: localname
      rt: builtins.str
    - prop: text
      rt: builtins.str
  main: |
    from lxml.etree import QName
    qn: QName
    reveal_type(qn.{{ prop }})  # N: Revealed type is "{{ rt }}"
    qn.{{ prop }} = ""  # E: Property "{{ prop }}" defined in "QName" is read-only

- case: qname_compare
  parametrized:
    - other: qn
    - other: s
  main: |
    from lxml.etree import QName
    s: str
    qn: QName
    qn == {{ other }}
    qn != {{ other }}
    qn > {{ other }}
    qn < {{ other }}
    qn >= {{ other }}
    qn <= {{ other }}

- case: docinfo_methods
  main: |
    from lxml.etree import DocInfo
    d: DocInfo
    d.clear()

- case: docinfo_ro_properties
  parametrized:
    - prop: root_name
      rt: Union[builtins.str, None]
    - prop: xml_version
      rt: Union[builtins.str, None]
    - prop: encoding
      rt: Union[builtins.str, None]
    - prop: standalone
      rt: Union[builtins.bool, None]
    - prop: doctype
      rt: builtins.str
    - prop: internalDTD
      rt: Union[lxml.etree.DTD, None]
    - prop: externalDTD
      rt: Union[lxml.etree.DTD, None]
  main: |
    from lxml.etree import DocInfo
    d: DocInfo
    reveal_type(d.{{ prop }})  # N: Revealed type is "{{ rt }}"

- case: docinfo_rw_properties
  parametrized:
    - prop: public_id
      rt: Union[builtins.str, None]
    - prop: system_id
      rt: Union[builtins.str, None]
    - prop: URL
      rt: Union[builtins.str, None]
  main: |
    from lxml.etree import DocInfo
    d: DocInfo
    reveal_type(d.{{ prop }})  # N: Revealed type is "{{ rt }}"
    s: str
    d.{{ prop }} = s
