#
# XML:ID test cases for types-lxml
#

- case: include_files
  files: &INC
    - path: inc.py
      content: |
        from lxml import etree as e, html as h, objectify as o
        from lxml.html import html_parser as hh_parser, xhtml_parser as hx_parser
        eh_parser = e.HTMLParser()
        ex_parser = e.XMLParser()
        o_parser = o.makeparser()
        s: str
        b: bytes
        from pathlib import Path
        file_path = Path(s)
        file_io = open('somefile', 'r')
  main: null

- case: xmlid_goodargs
  files: *INC
  main: |
    from inc import e, s, b, hh_parser, o_parser, eh_parser
    reveal_type(e.XMLID(b))  # NR: .+ "Tuple\[.+]"$
    elem1, dic1 = e.XMLID(s)
    reveal_type(elem1)  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic1)  # NR: .+ "[\w\.]+\.dict\[[\w\.]+\.str, [\w\.]+\._Element]"$
    elem2, dic2 = e.XMLID(s, hh_parser, base_url=s)
    reveal_type(elem2)  # NR: .+ "[\w\.]+\.HtmlElement"$
    reveal_type(dic2)  # NR: .+ "[\w\.]+\.dict\[[\w\.]+\.str, [\w\.]+\.HtmlElement]"$
    elem3, dic3 = e.XMLID(s, parser=o_parser)
    reveal_type(elem3)  # NR: .+ "[\w\.]+\.ObjectifiedElement"$
    reveal_type(dic3)  # NR: .+ "[\w\.]+\.dict\[[\w\.]+\.str, [\w\.]+\.ObjectifiedElement]"$
    elem4, dic4 = e.XMLID(s, parser=eh_parser, base_url=b)
    reveal_type(elem4)  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic4)  # NR: .+ "[\w\.]+\.dict\[[\w\.]+\.str, [\w\.]+\._Element]"$

- case: xmlid_badargs
  files: *INC
  expect_fail: true
  parametrized:
    - args: '()'
    - args: '(None)'
    - args: '(file_io)'
    - args: '(s, 1)'
    - args: '(s, hx_parser, None)'
    - args: '(s, base_url=1, parser=hx_parser)'
  main: |
    from inc import e, s, file_io, hx_parser
    e.XMLID{{args}}

- case: xmldtdid_goodargs
  files: *INC
  main: |
    from inc import e, s, b, hx_parser, o_parser, ex_parser
    reveal_type(e.XMLDTDID(b))  # NR: .+ "Tuple\[.+]"$
    elem1, dic1 = e.XMLDTDID(s)
    reveal_type(elem1)  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic1)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\._Element]"$
    elem2, dic2 = e.XMLDTDID(s, hx_parser, base_url=s)
    reveal_type(elem2)  # NR: .+ "[\w\.]+\.HtmlElement"$
    reveal_type(dic2)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\.HtmlElement]"$
    elem3, dic3 = e.XMLDTDID(s, parser=o_parser)
    reveal_type(elem3)  # NR: .+ "[\w\.]+\.ObjectifiedElement"$
    reveal_type(dic3)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\.ObjectifiedElement]"$
    elem4, dic4 = e.XMLDTDID(s, parser=ex_parser, base_url=b)
    reveal_type(elem4)  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic4)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\._Element]"$

- case: xmldtdid_badargs
  files: *INC
  expect_fail: true
  parametrized:
    - args: '()'
    - args: '(None)'
    - args: '(file_io)'
    - args: '(s, 1)'
    - args: '(s, ex_parser, None)'
    - args: '(s, base_url=1, parser=ex_parser)'
  main: |
    from inc import e, s, file_io, ex_parser
    e.XMLDTDID{{args}}

- case: parseid_goodargs
  files: *INC
  main: |
    from inc import e, s, b, hx_parser, o_parser, ex_parser, file_path, file_io
    reveal_type(e.parseid(s))  # NR: .+ "Tuple\[.+]"$
    reveal_type(e.parseid(file_path))  # NR: .+ "Tuple\[.+]"$
    reveal_type(e.parseid(file_io))  # NR: .+ "Tuple\[.+]"$
    tree1, dic1 = e.parseid(s)
    reveal_type(tree1)  # NR: .+ "[\w\.]+\._ElementTree\[[\w\.]+\._Element]"$
    reveal_type(dic1)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\._Element]"$
    tree2, dic2 = e.parseid(s, hx_parser, base_url=s)
    reveal_type(tree2)  # NR: .+ "[\w\.]+\._ElementTree\[[\w\.]+\.HtmlElement]"$
    reveal_type(dic2)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\.HtmlElement]"$
    tree3, dic3 = e.parseid(s, parser=o_parser)
    reveal_type(tree3)  # NR: .+ "[\w\.]+\._ElementTree\[[\w\.]+\.ObjectifiedElement]"$
    reveal_type(dic3)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\.ObjectifiedElement]"$
    tree4, dic4 = e.parseid(s, parser=ex_parser, base_url=b)
    reveal_type(tree4)  # NR: .+ "[\w\.]+\._ElementTree\[[\w\.]+\._Element]"$
    reveal_type(dic4)  # NR: .+ "[\w\.]+\._IDDict\[[\w\.]+\._Element]"$

- case: parseid_badargs
  files: *INC
  expect_fail: true
  parametrized:
    - args: '()'
    - args: '(None)'
    - args: '(file_io, 1)'
    - args: '(file_io, ex_parser, None)'
    - args: '(file_io, base_url=1, parser=ex_parser)'
  main: |
    from inc import e, file_io, ex_parser
    e.parseid{{args}}

# Given the maintenance of submodule, we only test the very basics of
# dict properties and methods, extras will be entirely ignored.
- case: iddict_props
  files: *INC
  main: |
    from inc import e, o, s, b
    dic1: e._IDDict[e._Element]
    dic2: e._IDDict[o.ObjectifiedElement]
    if s in dic1:
      for key in dic1:
        reveal_type(dic1[key])  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(len(dic1))  # NR: .+ "[\w\.]+\.int"$
    reveal_type(dic1.get(b))  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic1.keys())  # NR: .+ "[\w\.]+\.list\[[\w\.]+\.str]"$
    reveal_type(dic1.values())  # NR: .+ "[\w\.]+\.list\[[\w\.]+\._Element]"$
    for k, v in dic1.items():
      reveal_type(k)  # NR: .+ "[\w\.]+\.str"$
      reveal_type(v)  # NR: .+ "[\w\.]+\._Element"$
    reveal_type(dic2[s])  # NR: .+ "[\w\.]+\.ObjectifiedElement"
    for k, v in dic2.items():
      reveal_type(k)  # NR: .+ "[\w\.]+\.str"$
      reveal_type(v)  # NR: .+ "[\w\.]+\.ObjectifiedElement"$
