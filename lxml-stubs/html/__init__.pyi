from typing import Any, Callable, Iterable, Iterator, MutableMapping, MutableSet

from typing_extensions import Literal

from .._types import _AnyStr
from ..etree import (
    HTMLParser as _HTMLParser,
    XMLParser as _XMLParser,
    _BaseParser,
    _Element,
)

_HANDLE_FALURES = Literal["ignore", "discard", None]

XHTML_NAMESPACE: str = ...

class Classes(MutableSet):
    def __init__(self, attributes: MutableMapping[str, Any]) -> None: ...
    def add(self, value: str) -> None: ...
    def discard(self, value: str) -> None: ...
    def remove(self, value: str) -> None: ...
    def __contains__(self, name: object) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def update(self, values: Iterable[str]) -> None: ...
    def toggle(self, value: str) -> bool: ...

class HtmlMixin:
    base_url: str | None
    forms: list[_Element | None]
    body: _Element | None
    head: _Element | None
    label: _Element | None
    def set(self, key: str, value: Any) -> None: ...
    def drop_tree(self) -> None: ...
    def drop_tag(self) -> None: ...
    def find_rel_links(self, rel: str) -> list[_Element]: ...
    def find_class(self, class_name: str) -> list[_Element]: ...
    def get_element_by_id(self, id: str, *default) -> _Element | None: ...
    def text_content(self) -> str: ...
    def cssselect(self, expr: str, translator: str = ...) -> list[_Element]: ...
    def make_links_absolute(
        self,
        base_url: str = ...,
        resolve_base_href: bool = ...,
        handle_failures: _HANDLE_FALURES = ...,
    ) -> str: ...
    def resolve_base_href(self, handle_failures: _HANDLE_FALURES = ...) -> None: ...
    def iterlinks(self) -> Iterator[tuple[_Element, str | None, str, int]]: ...
    def rewrite_links(
        self,
        link_repl_func: Callable[[str], str | None],
        resolve_base_href: bool = ...,
        base_href: str = ...,
    ) -> None: ...

class HTMLParser(_HTMLParser):
    pass

class XHTMLParser(_XMLParser):
    pass

def document_fromstring(
    html: _AnyStr, parser: _BaseParser = ..., ensure_head_body: bool = ..., **kw
) -> _Element: ...
def fragments_fromstring(
    html: _AnyStr,
    no_leading_text: bool = ...,
    base_url: str = ...,
    parser: _BaseParser = ...,
    **kw
) -> _Element: ...
def fromstring(
    html: _AnyStr, base_url: str = ..., parser: _BaseParser = ..., **kw
) -> _Element: ...
