- case: construct_simple
  main: |
    from lxml import etree
    expr: str
    xpath = etree.XPath(expr)
    reveal_type(xpath)  # N: Revealed type is "lxml.etree._xpath.XPath"
    reveal_type(xpath.path)  # N: Revealed type is "builtins.str"
    xpath.path = xpath.path  # E: Property "path" defined in "XPath" is read-only  [misc]

- case: construct_goodargs
  parametrized:
    - args: s, regexp=True, smart_strings=False
    - args: path=b, namespaces=ns
    - args: s, extensions=ext1
    - args: b, regexp=False, extensions=ext2, namespaces=ns
  main: |
    from lxml.etree import XPath
    s: str
    b: bytes
    ns = {s: s}
    def extfunc1(context, a) -> str:
      return ''
    def extfunc2(context, a, b) -> int:
      return 0
    ext1 = [{(None, s): extfunc1}]
    ext2 = {(s, s): extfunc2}
    result = XPath({{ args }})

- case: construct_badargs
  expect_fail: true
  parametrized:
    - args: None
    - args: "s, None"
    - args: "b, badarg=None"
    - args: "s, namespaces={s: 1}"
    - args: "b, extensions=badext"
    - args: "s, regexp=o"
    - args: "b, smart_string=o"
  main: |
    from lxml.etree import XPath
    s: str
    b: bytes
    o: object
    def extfunc(context, a) -> str: ...
    badext = {(None, None): extfunc}
    _ = XPath({{ args }})

- case: etxpath_construct_simple
  main: |
    from lxml import etree
    expr: str
    xpath = etree.ETXPath(expr)
    reveal_type(xpath)  # N: Revealed type is "lxml.etree._xpath.ETXPath"
    reveal_type(xpath.path)  # N: Revealed type is "builtins.str"
    xpath.path = xpath.path  # E: Property "path" defined in "XPath" is read-only  [misc]

- case: etxpath_construct_goodargs
  parametrized:
    - args: s, regexp=True, smart_strings=False
    - args: path=b
    - args: s, extensions=ext1
    - args: b, regexp=False, extensions=ext2
  main: |
    from lxml.etree import ETXPath
    s: str
    b: bytes
    def extfunc1(context, a) -> str:
      return ''
    def extfunc2(context, a, b) -> int:
      return 0
    ext1 = [{(None, s): extfunc1}]
    ext2 = {(s, s): extfunc2}
    result = ETXPath({{ args }})

- case: etxpath_construct_badargs
  expect_fail: true
  parametrized:
    - args: None
    - args: "s, None"
    - args: "b, badarg=None"
    - args: "s, extensions=badext"
    - args: "b, regexp=o"
    - args: "s, smart_string=o"
  main: |
    from lxml.etree import ETXPath
    s: str
    b: bytes
    o: object
    def extfunc(context, a) -> str: ...
    badext = {(None, None): extfunc}
    _ = ETXPath({{ args }})

- case: evaluation_result
  parametrized:
    - cls: etree.XPath
    - cls: etree.ETXPath
  main: |
    from lxml import etree
    s: str
    xpath: {{ cls }}
    root: etree._Element
    result = xpath(root)
    reveal_type(result)  # N: Revealed type is "Any"

- case: create_evaluator_matched
  parametrized:
    - ev_type: XPathElementEvaluator
      arg: root
    - ev_type: XPathDocumentEvaluator
      arg: tree
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    evaluator = etree.{{ ev_type }}({{ arg }})
    reveal_type(evaluator)  # N: Revealed type is "lxml.etree._xpath.{{ ev_type }}"

- case: create_evaluator_mismatch
  parametrized:
    - evaluator_t: XPathElementEvaluator
      arg: tree
      wrong_t: "_ElementTree[_Element]"
      expect_t: _Element
    - evaluator_t: XPathDocumentEvaluator
      arg: root
      wrong_t: _Element
      expect_t: "_ElementTree[_Element]"
    - evaluator_t: XPathElementEvaluator
      arg: 1
      wrong_t: int
      expect_t: "_Element"
    - evaluator_t: XPathDocumentEvaluator
      arg: 1
      wrong_t: int
      expect_t: "_ElementTree[_Element]"
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    _ = etree.{{ evaluator_t }}({{ arg }})  # E: Argument 1 to "{{ evaluator_t }}" has incompatible type "{{ wrong_t }}"; expected "{{ expect_t }}"  [arg-type]

- case: create_evaluator_autodetect
  parametrized:
    - arg: root
      rt: lxml.etree._xpath.XPathElementEvaluator
    - arg: tree
      rt: lxml.etree._xpath.XPathDocumentEvaluator
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    evaluator = etree.XPathEvaluator({{ arg }})
    reveal_type(evaluator)  # N: Revealed type is "{{ rt }}"

- case: create_evaluator_bad_type
  expect_fail: true  # No overload variant
  main: |
    from lxml import etree
    evaluator = etree.XPathEvaluator('fail_here')

- case: evaluator_result
  parametrized:
    - ev: elem_ev
    - ev: doc_ev
  main: |
    from lxml import etree
    elem_ev: etree.XPathElementEvaluator
    doc_ev: etree.XPathDocumentEvaluator
    path: str
    bpath: bytes
    reveal_type({{ ev }}(path))  # N: Revealed type is "Any"
    reveal_type({{ ev }}(bpath))  # N: Revealed type is "Any"
