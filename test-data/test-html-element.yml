- case: html_element_mixin_properties_ro
  parametrized:
    - prop: classes
      rt: lxml.html.Classes
    - prop: label
      rt: Union[lxml.html.LabelElement, None]
    - prop: base_url
      rt: Union[builtins.str, None]
    - prop: forms
      rt: builtins.list[lxml.html.FormElement]
    - prop: body
      rt: lxml.html.HtmlElement
    - prop: head
      rt: lxml.html.HtmlElement
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    reveal_type(elem.{{ prop }})  # N: Revealed type is "{{ rt }}"

- case: html_element_mixin_properties_rw
  main: |
    from lxml.html import HtmlElement, LabelElement
    elem: HtmlElement
    elem.classes = elem.classes
    elem.classes = {'cls1', 'cls2'}  # E: Incompatible types in assignment (expression has type "Set[str]", variable has type "Classes")
    # Cheating here! Actually LabelElement can't be created this way
    label: LabelElement
    elem.label = label
    elem.label = elem  # E: Incompatible types in assignment (expression has type "HtmlElement", variable has type "Optional[LabelElement]")

- case: html_element_mixin_properties_bad
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    elem.head = elem.head
    elem.head = None
    result = elem.badprop
    elem.badprop = 'foobar'
  out: |
    main:3: error: Property "head" defined in "HtmlMixin" is read-only
    main:4: error: Property "head" defined in "HtmlMixin" is read-only
    main:4: error: Incompatible types in assignment (expression has type "None", variable has type "HtmlElement")
    main:5: error: "HtmlElement" has no attribute "badprop"
    main:6: error: "HtmlElement" has no attribute "badprop"

- case: html_element_mixin_method_set1
  parametrized:
  - args: val0, val0
  - args: val0, val1
  - args: val0, val2
  - args: val0, val3
  - args: val0
  - args: val1, val0
  - args: val1, val1
  - args: val1
  - args: val3, val0
  - args: val3, val3
  - args: val3
  main: |
    from lxml import etree, html
    val0: str
    val1: bytes
    val2 = None
    val3: etree.QName
    elem: html.HtmlElement
    elem.set({{ args }})

- case: html_element_mixin_method_set2
  parametrized:
  - args: goodarg, badarg0
    pos: 2
    wrong_type: int
    exp_type: Optional[Union[str, bytes, QName]]
  - args: badarg1, goodarg
    pos: 1
    wrong_type: object
    exp_type: Union[str, bytes, QName]
  main: |
    from lxml.html import HtmlElement
    goodarg: str
    badarg0: int
    badarg1: object
    elem: HtmlElement
    elem.set({{ args }})  # E: Argument {{ pos }} to "set" of "HtmlMixin" has incompatible type "{{ wrong_type }}"; expected "{{ exp_type }}"

- case: html_element_mixin_method_drop_
  parametrized:
  - func: drop_tree
  - func: drop_tag
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    elem.{{ func }}()

- case: html_element_mixin_method_find_rel_links
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    result = elem.find_rel_links('stylesheet')
    reveal_type(result)  # N: Revealed type is "builtins.list[lxml.html.HtmlElement]"

- case: html_element_mixin_method_find_class
  parametrized:
  - args: arg0
  - args: arg1
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    arg0 = 'cls'
    arg1 = b'cls'
    result = elem.find_class({{ args }})

- case: html_element_mixin_method_get_element_by_id1
  parametrized:
  - args: arg0
    rt: lxml.html.HtmlElement
  - args: arg1
    rt: lxml.html.HtmlElement
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    arg0: str
    arg1: bytes
    result = elem.get_element_by_id({{ args }})
    reveal_type(result)  # N: Revealed type is "{{ rt }}"

- case: html_element_mixin_method_get_element_by_id2
  expect_fail: true
  parametrized:
  - args: arg0
    wrong_type: int
  - args: arg1
    wrong_type: bool
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    {{ args }}: {{ wrong_type }}
    result = elem.get_element_by_id({{ args }})

- case: html_element_mixin_method_text_content
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    result = elem.text_content()
    reveal_type(result)  # N: Revealed type is "builtins.str"
    result = elem.text_content(None)  # E: Too many arguments for "text_content" of "HtmlMixin"

- case: html_element_mixin_method_iterlinks
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    result = elem.iterlinks()
    reveal_type(result)  # N: Revealed type is "typing.Iterator[Tuple[lxml.html.HtmlElement, Union[builtins.str, None], builtins.str, builtins.int]]"
    result = elem.iterlinks(None)  # E: Too many arguments for "iterlinks" of "HtmlMixin"

- case: html_element_mixin_method_make_links_absolute1
  parametrized:
  - args: null
  - args: url
  - args: url, False
  - args: None, True, None
  - args: base_url=url
  - args: resolve_base_href=True
  - args: handle_failures=None
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    url = 'http://foo.bar'
    elem.make_links_absolute({{ args }})

- case: html_element_mixin_method_make_links_absolute2
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    url: str
    badurl: bytes
    elem.make_links_absolute(badurl)  # E: Argument 1 to "make_links_absolute" of "HtmlMixin" has incompatible type "bytes"; expected "Optional[str]"
    elem.make_links_absolute(url, 2, None)  # E: Argument 2 to "make_links_absolute" of "HtmlMixin" has incompatible type "int"; expected "bool"
    elem.make_links_absolute(handle_failures='badval')  # E: Argument "handle_failures" to "make_links_absolute" of "HtmlMixin" has incompatible type "Literal['badval']"; expected "Optional[Literal['ignore', 'discard']]"
    elem.make_links_absolute(badarg=1)  # E: Unexpected keyword argument "badarg" for "make_links_absolute" of "HtmlMixin"
    elem.make_links_absolute(url, True, 'discard', None)  # E: Too many arguments for "make_links_absolute" of "HtmlMixin"

- case: html_element_mixin_method_resolve_base_href
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    elem.resolve_base_href()
    elem.resolve_base_href(b'ignore')  # E: Argument 1 to "resolve_base_href" of "HtmlMixin" has incompatible type "Literal[b'ignore']"; expected "Optional[Literal['ignore', 'discard']]"
    elem.resolve_base_href(handle_failures='discard')
    elem.resolve_base_href(badarg=1)  # E: Unexpected keyword argument "badarg" for "resolve_base_href" of "HtmlMixin"
    elem.resolve_base_href(None, None)  # E: Too many arguments for "resolve_base_href" of "HtmlMixin"

- case: html_element_mixin_method_rewrite_links1
  parametrized:
  - args: repl_func
  - args: repl_func, resolve_base_href=False
  - args: repl_func, True, base
  - args: link_repl_func=repl_func, base_href=base
  - args: resolve_base_href=True, link_repl_func=repl_func
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    base: str
    def repl_func(href: str):
      return href[1:]
    elem.rewrite_links({{ args }})

- case: html_element_mixin_method_rewrite_links2
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    badbase: bytes
    def bad_func(href: bytes): ...
    def repl_func(href: str) -> str: ...
    elem.rewrite_links()  # E: Missing positional argument "link_repl_func" in call to "rewrite_links" of "HtmlMixin"
    elem.rewrite_links(bad_func)  # E: Argument 1 to "rewrite_links" of "HtmlMixin" has incompatible type "Callable[[bytes], Any]"; expected "Callable[[str], Optional[str]]"
    elem.rewrite_links(repl_func, 'badval')  # E: Argument 2 to "rewrite_links" of "HtmlMixin" has incompatible type "str"; expected "bool"
    elem.rewrite_links(repl_func, True, badbase)  # E: Argument 3 to "rewrite_links" of "HtmlMixin" has incompatible type "bytes"; expected "Optional[str]"

- case: xpath
  parametrized:
    - kwds: namespaces=None
    - kwds: namespaces=ns
    - kwds: extensions=None
    - kwds: extensions=ext2
    - kwds: smart_string=True
    - kwds: var=1
    - kwds: "namespaces=ns, extensions=ext1, smart_string=False"
  main: |
    from lxml.html import HtmlElement
    root: HtmlElement
    xpath_expr: str
    s: str
    ns = {s: s}
    def extfunc1(context, a) -> str: ...
    def extfunc2(context, a, b) -> int: ...
    ext1 = [{(None, s): extfunc1}]
    ext2 = {(s, s): extfunc2}
    result = root.xpath(xpath_expr, {{ kwds }})

- case: xpath_noarg
  main: |
    from lxml.html import HtmlElement
    root: HtmlElement
    root.xpath()  # E: Too few arguments for "xpath" of "_Element"

- case: xpath_badarg
  expect_fail: true
  parametrized:
    - args: path=expr
    - args: "expr, namespaces=badns"
    - args: "expr, extensions=badext"
  main: |
    from lxml.html import HtmlElement
    root: HtmlElement
    expr: str
    s: str
    badns = {s: 1}
    def extfunc1(context, a) -> str: ...
    badext = [{badns: extfunc1}]
    root.xpath({{ args }})
