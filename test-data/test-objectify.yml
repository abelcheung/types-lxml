- case: fromstring_default_arg
  parametrized:
    - args: s
    - args: xml=b
  main: |
    s: str
    b: bytes
    from lxml.objectify import fromstring
    reveal_type(fromstring({{ args }}))  # N: Revealed type is "lxml.objectify.ObjectifiedElement"

- case: oe_has_arbitrary_attribute
  parametrized:
    - attr: x
    - attr: x.x
    - attr: x.y.z
  main: |
    from lxml.objectify import ObjectifiedElement
    doc: ObjectifiedElement
    reveal_type(doc.{{ attr }})  # N: Revealed type is "lxml.objectify.ObjectifiedElement"

- case: oe_is_iterable
  main: |
    from lxml.objectify import ObjectifiedElement
    doc: ObjectifiedElement
    for el in doc:
      reveal_type(el)  # N: Revealed type is "lxml.objectify.ObjectifiedElement"

- case: oe_specific_methods_no_arg
  parametrized:
    - method: countchildren
      rt: builtins.int
    - method: getchildren
      rt: builtins.list[lxml.objectify.ObjectifiedElement]
    - method: descendantpaths
      rt: builtins.list[builtins.str]
  main: |
    from lxml.objectify import ObjectifiedElement
    doc: ObjectifiedElement
    reveal_type(doc.{{ method }}())  # N: Revealed type is "{{ rt }}"

- case: oe_specific_methods_have_arg
  parametrized:
    - method: addattr
      args: s, 1
      rt: None
    - method: addattr
      args: tag=s, value=s
      rt: None
    - method: descendantpaths
      args: prefix=s
      rt: builtins.list[builtins.str]
  main: |
    s: str
    from lxml.objectify import ObjectifiedElement
    doc: ObjectifiedElement
    reveal_type(doc.{{ method }}({{ args }}))  # N: Revealed type is "{{ rt }}"

- case: elementmaker_default
  main: |
    from lxml.objectify import E
    reveal_type(E)  # N: Revealed type is "lxml.objectify.ElementMaker"

- case: elementmaker_customize
  parametrized:
    - args: namespace=ns
    - args: makeelement=ObjectifiedElement
    - args: namespace=ns, nsmap=map
    - args: annotate=True
  main: |
    from typing import Dict
    from lxml.objectify import ObjectifiedElement, ElementMaker
    ns: str
    map: Dict[str, str]
    E = ElementMaker({{ args }})
    reveal_type(E)  # N: Revealed type is "lxml.objectify.ElementMaker"

- case: elementmaker_create_elements
  parametrized:
    - method: foo
      rt: lxml.objectify.ObjectifiedElement
    - method: BAR
      rt: lxml.objectify.ObjectifiedElement
    - method: __nonExistent__
      rt: lxml.objectify.ObjectifiedElement
    - method: __str__
      rt: builtins.str
  main: |
    from lxml.objectify import E
    reveal_type(E.{{ method }}())  # N: Revealed type is "{{ rt }}"

# Modified from official doc example
- case: elementmaker_complex_example
  main: |
    from lxml.objectify import E

    A = E.a
    I = E.i
    B = E.b

    def CLASS(v):
      return {'class': v}

    page = (
      E.html(
        E.head(
          E.title("This is a sample document")
        ),
        E.body(
          E.h1("Hello!", CLASS("title")),
          E.p("This is a paragraph with ", B("bold"), " text in it!"),
          E.p("This is another paragraph, with a ",
              A("link", href="http://www.python.org"), "."),
          E.p("Here are some reserved characters: <spam&egg>."),
          E.p("Paragraph with style.", style="color: blue;"),
        )
      )
    )
    reveal_type(page)  # N: Revealed type is "lxml.objectify.ObjectifiedElement"
