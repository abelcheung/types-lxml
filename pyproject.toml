#:schema https://json.schemastore.org/pyproject.json

[build-system]
requires = ['pdm-backend ~= 2.3']
build-backend = 'pdm.backend'

[project]
name = 'types-lxml'
dynamic = ['version']
description = 'Complete lxml external type annotation'
readme = 'README.md'
requires-python = '>=3.8'
license = {text = 'Apache-2.0'}
dependencies = [
    'types-beautifulsoup4 ~= 4.12',
    'typing_extensions ~= 4.10; python_version < "3.13"',
    'cssselect ~= 1.2'  # cssselect uses inline annotation
]
keywords = ['lxml', 'typing', 'stubs', 'annotation']
authors = [
    { name = 'Abel Cheung', email = 'abelcheung@gmail.com' }
]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python',
    'Intended Audience :: Developers',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Typing :: Stubs Only',
]

[project.urls]
homepage = 'https://github.com/abelcheung/types-lxml'

[project.optional-dependencies]
mypy = ['mypy ~= 1.11']
pyright = ['pyright >= 1.1.351']

# mostly pinned for tox testing except dev group
[dependency-groups]
basic = [
    "types-beautifulsoup4 == 4.12.0.20241020",
    "typing_extensions == 4.12.2; python_version < '3.13'",
    "cssselect == 1.2.0",
]
mypy    = ["mypy == 1.11.2"]
pyright = ["pyright == 1.1.387"]
format  = ["ruff ~= 0.6"]
stub-test = [
    "pytest-mypy-plugins == 3.1.2",
    {include-group = "mypy"},
]
rt-test = [
    'typeguard == 3.0; python_full_version < "3.12.4"',
    'typeguard == 4.3.0; python_full_version >= "3.12.4"',
    "pytest == 8.3.3",
    "beautifulsoup4 == 4.12.3",
    "html5lib == 1.1",
    {include-group = "mypy"},
    {include-group = "pyright"},
]
lxml49 = ["lxml == 4.9.4"]
lxml50 = ["lxml == 5.0.2"]
lxml51 = ["lxml == 5.1.1"]
lxml52 = ["lxml == 5.2.2"]
lxml53 = ["lxml == 5.3.0"]
dev = [
    'tox ~= 4.22',
    'mypy >= 1.11.2',
    # microsoft/pyright#9286 and microsoft/pyright#9296
    'pyright >= 1.1.387',
    'typeguard >= 3.0; python_full_version < "3.12.4"',
    'typeguard >= 4.3.0; python_full_version >= "3.12.4"',
    'pytest >= 7.0, < 9',
    'html5lib == 1.1',
    'pytest-mypy-plugins >= 2.0',
    'lxml >= 4.9',
    'beautifulsoup4 ~= 4.8',
]

[tool.pdm.version]
source = 'scm'

[tool.pdm.build]
includes = ['src']
package-dir = 'src'
excludes = [
    '**/__pycache__',
    '**/.*',
    '**/*.bak',
    '**/*.patch',
    '/*.py',
]

[tool.setuptools_scm]

[tool.pyright]
stubPath = 'src'
extraPaths = ['tests/runtime']
typeCheckingMode = 'strict'
reportPrivateUsage = false
reportUnnecessaryTypeIgnoreComment = false
# Follows typeshed practice, separate mypy and pyright
# type-ignores
# See https://github.com/python/mypy/issues/12358
enableTypeIgnoreComments = false

[tool.mypy]
mypy_path = '$MYPY_CONFIG_FILE_DIR/src'
strict = true
show_error_context = true
pretty = true
warn_unused_ignores = false

[tool.ruff]
target-version = "py312"

[tool.ruff.format]
preview = true

[tool.ruff.lint]
select = ["I"]
task-tags = [
    "BUG",
    "FIXME",
    "HACK",
    "TODO",
    "XXX",
]

[tool.ruff.lint.isort]
# doesn't work
# known-first-party = ["typing_extensions", "_typeshed"]
combine-as-imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--tb=short"

[tool.tox]
env_list = [
    # No project maintenance related envs here
    {replace = 'ref', of = ['tool', 'tox', 'labels', 'typecheck'], extend = true},
    {replace = 'ref', of = ['tool', 'tox', 'labels', 'static'   ], extend = true},
    {replace = 'ref', of = ['tool', 'tox', 'labels', 'runtime'  ], extend = true},
]

[tool.tox.labels]
typecheck = [
    'pyright',
    'mypy',
]
static = [
    'py38-stub',
    'py39-stub',
    'py310-stub',
    'py311-stub',
    'py312-stub',
    'py313-stub',
]
runtime = [
    'py310-rt-lxml49',
    'py310-rt-lxml50',
    'py310-rt-lxml51',
    'py310-rt-lxml52',
    'py310-rt-lxml53',
    'py311-rt-lxml49',
    'py311-rt-lxml50',
    'py311-rt-lxml51',
    'py311-rt-lxml52',
    'py311-rt-lxml53',
    'py312-rt-lxml49',
    'py312-rt-lxml50',
    'py312-rt-lxml51',
    'py312-rt-lxml52',
    'py312-rt-lxml53',
    'py313-rt-lxml53',
]

# HACK Taking advantage of tox-gh-actions using
# its own string processing when parsing config,
# therefore works even when migrating tox config
# to TOML. Beware that tox-gh-actions version
# must be hardcoded to 3.2.0
[tool.tox.gh-actions]
python = """
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313
    """

[tool.tox.env_run_base.set_env]
PYTHONUTF8 = '1'

[tool.tox.env.mypy]
description = 'Use mypy to check annotation files for error'
package = 'skip'
dependency_groups = [
    'basic',
    'mypy',
]
commands = [['mypy', {replace = 'posargs', extend = true}]]

[tool.tox.env.pyright]
description = 'Use pyright to check annotation files for error'
package = 'skip'
dependency_groups = [
    'basic',
    'pyright',
]
commands = [['pyright', {replace = 'posargs', extend = true}, 'src']]

[tool.tox._env_stub]
package = 'wheel'
wheel_build_env = '{package_env}'
dependency_groups = ['stub-test']
commands = [[
    'pytest',
    '--mypy-ini-file=tests/static/mypy-pytest.ini',
    {replace = 'posargs', default = ['tests/static'], extend = true},
]]

[tool.tox._env_rt]
package = 'wheel'
wheel_build_env = '{package_env}'
commands = [[
    'pytest',
    {replace = 'posargs', default = ['tests/runtime'], extend = true}
]]
commands_pre = [
    ['pyright', '--level', 'error', 'tests/runtime'],
    # HACK Resort to mypy.api since command line doesn't know
    # how to dump to file or discard output, and tox doesn't
    # support shell semantics.
    # Besides, early 1.11.* mypy unconditionally exits uncleanly
    # when JSON output is requested. So use text mode here,
    # unlike what's actually done in mypy_adapter.py
    [
        'python', '-c',
        '''
from mypy.api import run
r=run(["--config-file=tests/runtime/rttest-mypy.ini","tests/runtime"])
for line in r[0].splitlines():
    if ": note:" not in line:
        print(line.strip())
exit(r[2])
        '''
    ],
]

[tool.tox._env_lxml49]
dependency_groups = ['rt-test', 'lxml49']

[tool.tox._env_lxml50]
dependency_groups = ['rt-test', 'lxml50']

[tool.tox._env_lxml51]
dependency_groups = ['rt-test', 'lxml51']

[tool.tox._env_lxml52]
dependency_groups = ['rt-test', 'lxml52']

[tool.tox._env_lxml53]
dependency_groups = ['rt-test', 'lxml53']

[tool.tox.env]
py38-stub  = {base = ['_env_stub']}
py39-stub  = {base = ['_env_stub']}
py310-stub = {base = ['_env_stub']}
py311-stub = {base = ['_env_stub']}
py312-stub = {base = ['_env_stub']}
py313-stub = {base = ['_env_stub']}
py310-rt-lxml49 = {base = ['_env_rt', '_env_lxml49']}
py310-rt-lxml50 = {base = ['_env_rt', '_env_lxml50']}
py310-rt-lxml51 = {base = ['_env_rt', '_env_lxml51']}
py310-rt-lxml52 = {base = ['_env_rt', '_env_lxml52']}
py310-rt-lxml53 = {base = ['_env_rt', '_env_lxml53']}
py311-rt-lxml49 = {base = ['_env_rt', '_env_lxml49']}
py311-rt-lxml50 = {base = ['_env_rt', '_env_lxml50']}
py311-rt-lxml51 = {base = ['_env_rt', '_env_lxml51']}
py311-rt-lxml52 = {base = ['_env_rt', '_env_lxml52']}
py311-rt-lxml53 = {base = ['_env_rt', '_env_lxml53']}
py312-rt-lxml49 = {base = ['_env_rt', '_env_lxml49']}
py312-rt-lxml50 = {base = ['_env_rt', '_env_lxml50']}
py312-rt-lxml51 = {base = ['_env_rt', '_env_lxml51']}
py312-rt-lxml52 = {base = ['_env_rt', '_env_lxml52']}
py312-rt-lxml53 = {base = ['_env_rt', '_env_lxml53']}
py313-rt-lxml53 = {base = ['_env_rt', '_env_lxml53']}

[tool.tox.env.build-normal]
pass_env = ['PDM_BUILD_SCM_VERSION']
deps = ['build']
package = 'skip'
commands = [[
    'python', '-m', 'build',
    {replace = 'posargs', extend = true},
]]

[tool.tox.env.build-alt]
base = ['env.build-normal']
allowlist_externals = ['git']
commands_pre  = [['git', 'apply',              'multi-subclass.patch']]
commands_post = [['git', 'apply', '--reverse', 'multi-subclass.patch']]

