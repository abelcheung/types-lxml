 pyproject.toml                         |  2 +-
 src/lxml-stubs/cssselect.pyi           | 10 ++---
 src/lxml-stubs/etree/_element.pyi      | 74 +++++++++++++++++-----------------
 src/lxml-stubs/etree/_factory_func.pyi |  6 +--
 src/lxml-stubs/html/_element.pyi       | 48 +++++++++++-----------
 src/lxml-stubs/objectify/_element.pyi  | 10 +++--
 tests/runtime/_testutils/common.py     |  2 +-
 7 files changed, 77 insertions(+), 75 deletions(-)

diff --git a/pyproject.toml b/pyproject.toml
index 20a3dd6..e5c49b2 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -5,7 +5,7 @@ requires = ['pdm-backend ~= 2.4']
 build-backend = 'pdm.backend'
 
 [project]
-name = 'types-lxml'
+name = 'types-lxml-multi-subclass'
 dynamic = ['version']
 description = 'Complete lxml external type annotation'
 readme = 'README.md'
diff --git a/src/lxml-stubs/cssselect.pyi b/src/lxml-stubs/cssselect.pyi
index 1ccf715..24f914b 100644
--- a/src/lxml-stubs/cssselect.pyi
+++ b/src/lxml-stubs/cssselect.pyi
@@ -6,8 +6,8 @@ import cssselect as _csel
 from cssselect.parser import Function
 from cssselect.xpath import XPathExpr
 
-from ._types import _ET, _ElementOrTree, _XPathNSArg, _XPathVarArg
-from .etree import XPath
+from ._types import _ElementOrTree, _XPathNSArg, _XPathVarArg
+from .etree import XPath, _Element
 from .html import HtmlElement
 from .objectify import ObjectifiedElement
 
@@ -48,7 +48,7 @@ class CSSSelector(XPath):
     # we handle the 2 built-in element families (HtmlElement
     # and ObjectifiedElement), but the rest is up to users.
     @overload
-    def __call__(
+    def __call__(  # pyright: ignore[reportOverlappingOverload]
         self,
         _etree_or_element: _ElementOrTree[ObjectifiedElement],
         /,
@@ -64,7 +64,7 @@ class CSSSelector(XPath):
     @overload
     def __call__(
         self,
-        _etree_or_element: _ElementOrTree[_ET],
+        _etree_or_element: _ElementOrTree,
         /,
         **_variables: _XPathVarArg,
-    ) -> list[_ET]: ...
+    ) -> list[_Element]: ...
diff --git a/src/lxml-stubs/etree/_element.pyi b/src/lxml-stubs/etree/_element.pyi
index 5f49ddf..34ea088 100644
--- a/src/lxml-stubs/etree/_element.pyi
+++ b/src/lxml-stubs/etree/_element.pyi
@@ -13,9 +13,9 @@ from typing import (
 )
 
 if sys.version_info >= (3, 11):
-    from typing import Never, Self
+    from typing import Never
 else:
-    from typing_extensions import Never, Self
+    from typing_extensions import Never
 
 if sys.version_info >= (3, 13):
     from warnings import deprecated
@@ -75,11 +75,11 @@ class _Element:
     #
     def __delitem__(self, __k: int | slice) -> None: ...
     @overload
-    def __getitem__(self, __x: int) -> Self: ...
+    def __getitem__(self, __x: int) -> _Element: ...
     @overload
-    def __getitem__(self, __x: slice) -> list[Self]: ...
+    def __getitem__(self, __x: slice) -> list[_Element]: ...
     @overload
-    def __setitem__(self, __x: int, __v: Self) -> None: ...
+    def __setitem__(self, __x: int, __v: _Element) -> None: ...
     # An element itself can be treated as container of other elements. When used
     # like elem[:] = new_elem, only subelements within new_elem will be
     # inserted, but not new_elem itself. If there is none, the whole slice would
@@ -89,25 +89,25 @@ class _Element:
     # doesn't apply to magic methods, at least for Pylance. Thus we create
     # additional overload for extend() but not here.
     @overload
-    def __setitem__(self, __x: slice, __v: Iterable[Self]) -> None: ...
+    def __setitem__(self, __x: slice, __v: Iterable[_Element]) -> None: ...
     def __contains__(self, __o: object) -> bool: ...
     def __len__(self) -> int: ...
     # There are a hoard of element iterators used in lxml, but
     # they only differ in implementation detail and don't affect typing.
-    def __iter__(self) -> Iterator[Self]: ...
-    def __reversed__(self) -> Iterator[Self]: ...
+    def __iter__(self) -> Iterator[_Element]: ...
+    def __reversed__(self) -> Iterator[_Element]: ...
     def set(self, key: _t._AttrName, value: _t._AttrVal) -> None: ...
-    def append(self, element: Self) -> None: ...
+    def append(self, element: _Element) -> None: ...
     @overload  # see __setitem__ for explanation
     @deprecated("Expects iterable of elements as value, not single element")
     def extend(self, elements: _Element) -> Never: ...
     @overload
-    def extend(self, elements: Iterable[Self]) -> None: ...
+    def extend(self, elements: Iterable[_Element]) -> None: ...
     def clear(self, keep_tail: bool = False) -> None: ...
-    def insert(self, index: int, element: Self) -> None: ...
-    def remove(self, element: Self) -> None: ...
+    def insert(self, index: int, element: _Element) -> None: ...
+    def remove(self, element: _Element) -> None: ...
     def index(
-        self, child: Self, start: int | None = None, stop: int | None = None
+        self, child: _Element, start: int | None = None, stop: int | None = None
     ) -> int: ...
     @overload
     def get(self, key: _t._AttrName) -> str | None: ...
@@ -119,53 +119,53 @@ class _Element:
     #
     # extra Element / ET methods
     #
-    def addnext(self, element: Self) -> None: ...
-    def addprevious(self, element: Self) -> None: ...
-    def replace(self, old_element: Self, new_element: Self) -> None: ...
-    def getparent(self) -> Self | None: ...
-    def getnext(self) -> Self | None: ...
-    def getprevious(self) -> Self | None: ...
-    def getroottree(self) -> _ElementTree[Self]: ...
+    def addnext(self, element: _Element) -> None: ...
+    def addprevious(self, element: _Element) -> None: ...
+    def replace(self, old_element: _Element, new_element: _Element) -> None: ...
+    def getparent(self) -> _Element | None: ...
+    def getnext(self) -> _Element | None: ...
+    def getprevious(self) -> _Element | None: ...
+    def getroottree(self) -> _ElementTree[_Element]: ...
     @overload
     def itersiblings(
         self, *tags: _t._TagSelector, preceding: bool = False
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def itersiblings(
         self,
         tag: _t._TagSelector | Collection[_t._TagSelector] | None = None,
         *,
         preceding: bool = False,
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iterancestors(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iterancestors(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iterancestors(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iterdescendants(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iterdescendants(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iterdescendants(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def iterchildren(
         self, *tags: _t._TagSelector, reversed: bool = False
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def iterchildren(
         self,
         tag: _t._TagSelector | Collection[_t._TagSelector] | None = None,
         *,
         reversed: bool = False,
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
-    def iter(self, *tags: _t._TagSelector) -> Iterator[Self]: ...
+    def iter(self, *tags: _t._TagSelector) -> Iterator[_Element]: ...
     @overload
     def iter(
         self, tag: _t._TagSelector | Collection[_t._TagSelector] | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     @overload
     def itertext(
         self, *tags: _t._TagSelector, with_tail: bool = True
@@ -177,10 +177,10 @@ class _Element:
         *,
         with_tail: bool = True,
     ) -> Iterator[str]: ...
-    makeelement: _t._ElementFactory[Self]
+    makeelement: _t._ElementFactory[_Element]
     def find(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> Self | None: ...
+    ) -> _Element | None: ...
     @overload
     def findtext(
         self,
@@ -197,10 +197,10 @@ class _Element:
     ) -> str | None: ...
     def findall(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> list[Self]: ...
+    ) -> list[_Element]: ...
     def iterfind(
         self, path: _t._ElemPathArg, namespaces: _t._StrictNSMap | None = None
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
     def xpath(
         self,
         _path: _t._TextArg,
@@ -216,15 +216,15 @@ class _Element:
         expr: str,
         *,
         translator: _CSSTransArg = "xml",
-    ) -> list[Self]: ...
+    ) -> list[_Element]: ...
     @deprecated("Since v2.0 (2008); use list(element) or iterate over element")
-    def getchildren(self) -> list[Self]: ...
+    def getchildren(self) -> list[_Element]: ...
     # Should have been overloaded for accuracy, but we can turn a blind eye
     # for something that is marked deprecated for 15 years
     @deprecated("Since v2.0 (2008); renamed to .iter()")
     def getiterator(
         self, tag: _t._TagSelector | None = None, *tags: _t._TagSelector
-    ) -> Iterator[Self]: ...
+    ) -> Iterator[_Element]: ...
 
 # ET class notation is specialized, indicating the type of element
 # it is holding (e.g. XML element, HTML element or Objectified
diff --git a/src/lxml-stubs/etree/_factory_func.pyi b/src/lxml-stubs/etree/_factory_func.pyi
index c76d234..a30daff 100644
--- a/src/lxml-stubs/etree/_factory_func.pyi
+++ b/src/lxml-stubs/etree/_factory_func.pyi
@@ -14,7 +14,7 @@ from .._types import (
 )
 from ..html import HtmlElement
 from ..objectify import ObjectifiedElement, StringElement
-from ._element import _Comment, _ElementTree, _Entity, _ProcessingInstruction
+from ._element import _Comment, _Element, _ElementTree, _Entity, _ProcessingInstruction
 
 def Comment(text: _TextArg | None = None) -> _Comment: ...
 def ProcessingInstruction(
@@ -61,13 +61,13 @@ def SubElement(
 ) -> HtmlElement: ...
 @overload
 def SubElement(
-    _parent: _ET,
+    _parent: _Element,
     _tag: _TagName,
     /,
     attrib: _AttrMapping | None = None,
     nsmap: _NSMapArg | None = None,
     **_extra: _AttrVal,
-) -> _ET: ...
+) -> _Element: ...
 @overload  # from element, parser ignored
 def ElementTree(element: _ET) -> _ElementTree[_ET]: ...
 @overload  # from file source, custom parser
diff --git a/src/lxml-stubs/html/_element.pyi b/src/lxml-stubs/html/_element.pyi
index 0e960e5..4b91821 100644
--- a/src/lxml-stubs/html/_element.pyi
+++ b/src/lxml-stubs/html/_element.pyi
@@ -125,72 +125,72 @@ class HtmlElement(etree.ElementBase):
     # Subclassing of _Element should not go beyond HtmlElement. For example,
     # while children of HtmlElement are mostly HtmlElement, FormElement never
     # contains FormElement as child.
-    @overload
+    @overload  # type: ignore[override]
     def __getitem__(
         self,
         __x: int,
     ) -> HtmlElement: ...
     @overload
-    def __getitem__(
+    def __getitem__(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         __x: slice,
     ) -> list[HtmlElement]: ...
-    @overload
+    @overload  # type: ignore[override]
     def __setitem__(
         self,
         __x: int,
         __v: HtmlElement,
     ) -> None: ...
     @overload
-    def __setitem__(
+    def __setitem__(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         __x: slice,
         __v: Iterable[HtmlElement],
     ) -> None: ...
     def __iter__(self) -> Iterator[HtmlElement]: ...
     def __reversed__(self) -> Iterator[HtmlElement]: ...
-    def append(
+    def append(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        element: HtmlElement,
+        element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
-    @overload
+    @overload  # type: ignore[override]
     @deprecated("Expects iterable of elements as value, not single element")
     def extend(
         self,
         elements: etree._Element,
     ) -> Never: ...
     @overload
-    def extend(
+    def extend(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         elements: Iterable[HtmlElement],
     ) -> None: ...
-    def insert(
+    def insert(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         index: int,
-        element: HtmlElement,
+        element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
-    def remove(
+    def remove(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        element: HtmlElement,
+        element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
-    def index(
+    def index(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        child: HtmlElement,
+        child: HtmlElement,  # type: ignore[override]
         start: int | None = None,
         stop: int | None = None,
     ) -> int: ...
-    def addnext(
+    def addnext(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        element: HtmlElement,
+        element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
-    def addprevious(
+    def addprevious(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        element: HtmlElement,
+        element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
-    def replace(
+    def replace(  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
-        old_element: HtmlElement,
-        new_element: HtmlElement,
+        old_element: HtmlElement,  # type: ignore[override]
+        new_element: HtmlElement,  # type: ignore[override]
     ) -> None: ...
     def getparent(self) -> HtmlElement | None: ...
     def getnext(self) -> HtmlElement | None: ...
@@ -265,13 +265,13 @@ class HtmlElement(etree.ElementBase):
         *,
         with_tail: bool = True,
     ) -> Iterator[str]: ...
-    makeelement: _ElementFactory[HtmlElement]
+    makeelement: _ElementFactory[HtmlElement]  # pyright: ignore[reportIncompatibleVariableOverride]
     def find(
         self,
         path: _ElemPathArg,
         namespaces: _StrictNSMap | None = None,
     ) -> HtmlElement | None: ...
-    def findall(
+    def findall(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         path: _ElemPathArg,
         namespaces: _StrictNSMap | None = None,
@@ -281,7 +281,7 @@ class HtmlElement(etree.ElementBase):
         path: _ElemPathArg,
         namespaces: _StrictNSMap | None = None,
     ) -> Iterator[HtmlElement]: ...
-    def cssselect(
+    def cssselect(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         expr: str,
         *,
diff --git a/src/lxml-stubs/objectify/_element.pyi b/src/lxml-stubs/objectify/_element.pyi
index fbf91ab..694caee 100644
--- a/src/lxml-stubs/objectify/_element.pyi
+++ b/src/lxml-stubs/objectify/_element.pyi
@@ -50,7 +50,7 @@ class ObjectifiedElement(ElementBase):
     def addattr(self, tag: _TagName, value: object) -> None: ...
     def countchildren(self) -> int: ...
     def descendantpaths(self, prefix: str | list[str] | None = None) -> list[str]: ...
-    def getchildren(self) -> list[ObjectifiedElement]: ...
+    def getchildren(self) -> list[ObjectifiedElement]: ...  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
     def __iter__(self) -> Iterator[ObjectifiedElement]: ...
     def __reversed__(self) -> Iterator[ObjectifiedElement]: ...
     def __getattr__(self, __name: str) -> ObjectifiedElement: ...
@@ -59,10 +59,12 @@ class ObjectifiedElement(ElementBase):
     def __delattr__(self, __name: str) -> None: ...
     # elem['foo'] is equivalent to elem.foo, but allows for
     # special attribute names (like 'text' or 'tail')
-    @overload
+    @overload  # type: ignore[override]
     def __getitem__(self, key: int | str | bytes, /) -> ObjectifiedElement: ...
     @overload
-    def __getitem__(self, key: slice, /) -> list[ObjectifiedElement]: ...
+    def __getitem__(  # pyright: ignore[reportIncompatibleMethodOverride]
+        self, key: slice, /
+    ) -> list[ObjectifiedElement]: ...
     @overload
     def __setitem__(self, key: int | str | bytes, value: object, /) -> None: ...
     @overload
@@ -71,7 +73,7 @@ class ObjectifiedElement(ElementBase):
     # TODO Check if _Element methods need overriding
     # CSS selector is not a normal use case for objectified
     # element (and unnecessary), but still usable nonetheless
-    def cssselect(
+    def cssselect(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride]
         self,
         expr: str,
         *,
diff --git a/tests/runtime/_testutils/common.py b/tests/runtime/_testutils/common.py
index 18f3405..8f5dcd0 100644
--- a/tests/runtime/_testutils/common.py
+++ b/tests/runtime/_testutils/common.py
@@ -18,7 +18,7 @@ else:
     from typing_extensions import Buffer
 
 # Intended for multi subclass patch
-is_multi_subclass_build = False
+is_multi_subclass_build = True
 
 
 class FuncSignatureError(Exception):
