- case: create_selector
  parametrized:
    - val: sel
      rt: lxml.cssselect.CSSSelector
    - val: sel.css
      rt: builtins.str
    - val: sel.path
      rt: builtins.str
  main: |
    from lxml.cssselect import CSSSelector
    sel = CSSSelector('#id')
    reveal_type({{ val }})  # N: Revealed type is "{{ rt }}"

- case: evaluation_of_selector
  parametrized:
    - input_type: _Element
      rt: '[\w\.]+\._Element'
    - input_type: "_ElementTree[_Element]"
      rt: '[\w\.]+\._Element'
    - input_type: HtmlElement
      rt: '[\w\.]+\.HtmlElement'
    - input_type: "_ElementTree[HtmlElement]"
      rt: '[\w\.]+\.HtmlElement'
  main: |
    from lxml.etree import _Element, _ElementTree
    from lxml.html import HtmlElement
    from lxml.cssselect import CSSSelector
    sel: CSSSelector
    input: {{ input_type }}
    reveal_type(sel(input))  # NR: Revealed type is "builtins.list\[{{ rt }}]"

- case: etree_cssselect_method
  main: |
    from lxml import etree
    root: etree._Element
    expr: str
    result = root.cssselect(expr)
    reveal_type(result)  # NR: .+ "[\w\.]+\.list[[\w\.]+\._Element]"$
    result = root.cssselect('tag', translator='xml')
    reveal_type(result)  # NR: .+ "[\w\.]+\.list[[\w\.]+\._Element]"$

- case: etree_cssselect_bad_arg1
  parametrized:
  - args: expr1
    wrong_type: bytes
  - args: expr2
    wrong_type: int
  main: |
    from lxml import etree
    root: etree._Element
    expr1: bytes
    expr2: int
    result = root.cssselect({{ args }})  # E: Argument 1 to "cssselect" of "_Element" has incompatible type "{{ wrong_type }}"; expected "str"  [arg-type]

- case: etree_cssselect_bad_arg2
  main: |
    from lxml import etree
    root: etree._Element
    result = root.cssselect('tag', 'xml')  # E: Too many positional arguments for "cssselect" of "_Element"  [misc]
    result = root.cssselect('tag', translator='junk')  # E: Argument "translator" to "cssselect" of "_Element" has incompatible type "Literal['junk']"; expected "Union[LxmlTranslator, Literal['xml', 'html', 'xhtml']]"  [arg-type]

- case: html_cssselect_method
  parametrized:
    - elem: el
      args: expr
    - elem: el
      args: expr, translator='xhtml'
    - elem: form
      args: expr
  main: |
    from lxml.html import HtmlElement, FormElement
    expr: str
    el: HtmlElement
    form: FormElement
    result = {{ elem }}.cssselect({{ args }})
    reveal_type(result)  # NR: Revealed type is "builtins\.list\[[\w\.]+\.HtmlElement]"

- case: html_cssselect_bad_arg1
  parametrized:
    - args: expr1
      wrong_type: bytes
    - args: expr2
      wrong_type: int
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    {{ args }}: {{ wrong_type }}
    result = elem.cssselect({{ args }})  # E: Argument 1 to "cssselect" of "HtmlElement" has incompatible type "{{ wrong_type }}"; expected "str"  [arg-type]

- case: html_cssselect_bad_arg2
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    expr: str
    result = elem.cssselect(expr, translator='junk')  # ER: Argument "translator" to "cssselect" of "HtmlElement" has incompatible type "Literal\['junk']"; expected "Union\[.+]"  \[arg-type]
