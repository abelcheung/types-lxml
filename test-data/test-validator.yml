- case: include_file
  skip: true
  files: &INC
    - path: inc.py
      content: |
        from lxml import etree
        from lxml.isoschematron import Schematron
        rng: etree.RelaxNG
        dtd: etree.DTD
        schema: etree.XMLSchema
        tron: Schematron
        tree: etree._ElementTree[etree._Element]
        elem: etree._Element
  main: null

- case: xmlschema_create
  parametrized:
    - args: elem
    - args: "tree, attribute_defaults=False"
    - args: "elem, file=None"
    - args: file=filename
    - args: file=path
    - args: "file=fileio, attribute_defaults=True"
  main: |
    from pathlib import PosixPath
    from io import StringIO
    from lxml import etree
    elem: etree._Element
    tree: etree._ElementTree
    filename: str
    fileio: StringIO
    path: PosixPath
    result = etree.XMLSchema({{ args }})
    reveal_type(result)  # N: Revealed type is "lxml.etree._xmlschema.XMLSchema"

- case: xmlschema_create_badarg
  expect_fail: true
  parametrized:
    - args: null
    - args: None
    - args: "None, file=None"
    - args: "elem, filename"
    - args: "elem, badarg=1"
    - args: "file=filename, badarg=1"
  main: |
    from lxml import etree
    elem: etree._Element
    filename: str
    result = etree.XMLSchema({{ args }})

- case: relaxng_construct
  parametrized:
    - args: tree
    - args: tree.getroot()
    - args: file=s
    - args: file=b
    - args: file=io.FileIO(s)
    - args: file=gzip.GzipFile(s)
    - args: file=open(s, 'r')
    - args: file=open(s, 'rb')
    - args: file=pathlib.Path(s)
  main: |
    import gzip, io, pathlib
    from lxml import etree
    s: str
    b: bytes
    tree: etree._ElementTree[etree._Element]
    rng = etree.RelaxNG({{ args }})
    reveal_type(rng)  # N: Revealed type is "lxml.etree._relaxng.RelaxNG"

- case: relaxng_construct_classmethod
  parametrized:
    - args: s
    - args: "src=s, base_url=s"
  main: |
    from lxml.etree import RelaxNG
    s: str
    rng = RelaxNG.from_rnc_string({{ args }})
    reveal_type(rng)  # N: Revealed type is "lxml.etree._relaxng.RelaxNG"

- case: relaxng_construct_badargs
  expect_fail: true
  parametrized:
    - args: ""
      is_method: false
    - args: s
      is_method: false
    - args: file=None
      is_method: false
    - args: file=root
      is_method: false
    - args: badarg=s
      is_method: false
    - args: ""
      is_method: true
    - args: 1
      is_method: true
    - args: None
      is_method: true
    - args: s, base_url=1
      is_method: true
    - args: badarg=s
      is_method: true
  main: |
    from lxml.etree import RelaxNG, _Element
    s: str
    root: _Element
    rng = RelaxNG{{#is_method}}.from_rnc_string{{/is_method}}({{ args }})

- case: superclass_validate_method
  files: *INC
  parametrized:
    - obj: rng
    - obj: dtd
    - obj: schema
    - obj: tron
  main: |
    from inc import rng, dtd, schema, tron, tree, elem
    reveal_type({{ obj }}(tree))  # NR: .+ "[\w\.]+\.bool"$
    reveal_type({{ obj }}(etree=elem))  # NR: .+ "[\w\.]+\.bool"$
    reveal_type({{ obj }}.validate(elem))  # NR: .+ "[\w\.]+\.bool"$
    reveal_type({{ obj }}.validate(etree=tree))  # NR: .+ "[\w\.]+\.bool"$

- case: superclass_validate_method_badarg
  files: *INC
  parametrized:
    - obj: rng
      cls: RelaxNG
      is_call: true
    - obj: dtd
      cls: DTD
      is_call: false
    - obj: schema
      cls: XMLSchema
      is_call: true
    - obj: tron
      cls: Schematron
      is_call: false
  main: |
    from inc import rng, dtd, schema, tron, tree, elem
    {{ obj }}{{^is_call}}.validate{{/is_call}}()  # E: Missing positional argument "etree" in call to {{#is_call}}"__call__" of "{{cls}}"{{/is_call}}{{^is_call}}"validate" of "_Validator"{{/is_call}}  [call-arg]
    {{ obj }}{{^is_call}}.validate{{/is_call}}(None)  # E: Argument 1 to {{#is_call}}"__call__" of "{{cls}}"{{/is_call}}{{^is_call}}"validate" of "_Validator"{{/is_call}} has incompatible type "None"; expected "Union[_Element, _ElementTree[_Element]]"  [arg-type]
    {{ obj }}{{^is_call}}.validate{{/is_call}}(tree, None)  # E: Too many arguments for {{#is_call}}"__call__" of "{{cls}}"{{/is_call}}{{^is_call}}"validate" of "_Validator"{{/is_call}}  [call-arg]
    {{ obj }}{{^is_call}}.validate{{/is_call}}(badarg=tree)  # E: Unexpected keyword argument "badarg" for {{#is_call}}"__call__" of "{{cls}}"{{/is_call}}{{^is_call}}"validate" of "_Validator"{{/is_call}}  [call-arg]

- case: superclass_other_methods
  files: *INC
  parametrized:
    - obj: rng
    - obj: dtd
    - obj: schema
    - obj: tron
  main: |
    from inc import rng, dtd, schema, tron, tree, elem
    reveal_type({{ obj }}.error_log)  # NR: .+ "[\w\.]+\._ListErrorLog"
    _ = {{ obj }}.assertValid(tree)  # E: "assertValid" of "_Validator" does not return a value  [func-returns-value]
    _ = {{ obj }}.assert_(elem)  # E: "assert_" of "_Validator" does not return a value  [func-returns-value]
