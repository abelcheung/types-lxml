- case: cssselect_create_selector
  parametrized:
    - val: sel
      rt: lxml.cssselect.CSSSelector
    - val: sel.css
      rt: builtins.str
    - val: sel.path
      rt: builtins.str
  main: |
    from lxml.cssselect import CSSSelector
    sel = CSSSelector('#id')
    reveal_type({{ val }})  # N: Revealed type is "{{ rt }}"

- case: cssselect_evaluation_of_selector
  parametrized:
    - input_type: _Element
      rt: lxml.etree._Element
    - input_type: "_ElementTree[_Element]"
      rt: lxml.etree._Element
    - input_type: HtmlElement
      rt: lxml.html.HtmlElement
    - input_type: "_ElementTree[HtmlElement]"
      rt: lxml.html.HtmlElement
  main: |
    from lxml.etree import _Element, _ElementTree
    from lxml.html import HtmlElement
    from lxml.cssselect import CSSSelector
    sel: CSSSelector
    input: {{ input_type }}
    reveal_type(sel(input))  # N: Revealed type is "builtins.list[{{ rt }}]"

- case: etree_cssselect_method
  main: |
    from lxml import etree
    root: etree._Element
    expr: str
    result = root.cssselect(expr)
    reveal_type(result)  # N: Revealed type is "builtins.list[lxml.etree._Element]"
    result = root.cssselect('tag', translator='xml')
    reveal_type(result)  # N: Revealed type is "builtins.list[lxml.etree._Element]"

- case: etree_cssselect_bad_arg1
  parametrized:
  - args: expr1
    wrong_type: bytes
  - args: expr2
    wrong_type: int
  main: |
    from lxml import etree
    root: etree._Element
    expr1: bytes
    expr2: int
    result = root.cssselect({{ args }})  # E: Argument 1 to "cssselect" of "_Element" has incompatible type "{{ wrong_type }}"; expected "str"

- case: etree_cssselect_bad_arg2
  main: |
    from lxml import etree
    root: etree._Element
    result = root.cssselect('tag', 'xml')  # E: Too many positional arguments for "cssselect" of "_Element"
    result = root.cssselect('tag', translator='junk')  # E: Argument "translator" to "cssselect" of "_Element" has incompatible type "Literal['junk']"; expected "Union[LxmlTranslator, Literal['xml', 'html', 'xhtml']]"

- case: html_cssselect_method
  parametrized:
    - args: expr
    - args: expr, translator
  main: |
    from lxml.html import Element
    root = Element('div')
    expr: str
    # Urgh, mypy infers the type here as str, not Literal['xhtml']
    from typing_extensions import Literal
    translator: Literal['xhtml']
    result = root.cssselect({{ args }})
    reveal_type(result)  # N: Revealed type is "builtins.list[lxml.html.HtmlElement]"

- case: html_cssselect_bad_arg1
  parametrized:
    - args: expr1
      wrong_type: bytes
    - args: expr2
      wrong_type: int
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    expr1: bytes
    expr2: int
    result = elem.cssselect({{ args }})  # E: Argument 1 to "cssselect" of "HtmlMixin" has incompatible type "{{ wrong_type }}"; expected "str"

- case: html_cssselect_bad_arg2
  main: |
    from lxml.html import HtmlElement
    elem: HtmlElement
    result = elem.cssselect('ul > li', 'junk')  # E: Argument 2 to "cssselect" of "HtmlMixin" has incompatible type "Literal['junk']"; expected "Union[LxmlTranslator, Literal['xml', 'html', 'xhtml']]"
