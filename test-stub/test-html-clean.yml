- case: cleaner_construct_simple
  main: |
    from lxml.html.clean import clean, Cleaner
    c = Cleaner()
    reveal_type(c)  # N: Revealed type is "lxml.html.clean.Cleaner"
    reveal_type(clean)  # N: Revealed type is "lxml.html.clean.Cleaner"

# Tiresome to test each and every argument, just pick some
- case: cleaner_construct_goodargs
  parametrized:
    - args: "scripts=False"
    - args: "style=False"
    - args: "meta=False, embedded=False"
    - args: "forms=False"
    - args: "remove_tags={'html', Comment}"
    - args: "remove_unknown_tags=True"
    - args: "add_nofollow=True"
    - args: "safe_attrs_only=False"
    - args: "host_whitelist=['a.com', 'b.net']"
    - args: "whitelist_tags=None"
  main: |
    from lxml.html.clean import Cleaner
    from lxml.etree import Comment
    c = Cleaner({{ args }})

- case: cleaner_construct_badargs
  expect_fail: true
  parametrized:
    - args: "1"
    - args: "badarg=None"
    - args: "style=o"
    - args: "allow_tags=[], remove_unknown_tags=True"
    - args: "page_structure='x'"
  main: |
    from lxml.html.clean import Cleaner
    o: object
    c = Cleaner({{ args }})

- case: cleaner_call
  parametrized:
    - args: root
    - args: tree
  main: |
    from lxml.html.clean import Cleaner
    from lxml.html import HtmlElement
    from lxml.etree import _ElementTree
    c: Cleaner
    root: HtmlElement
    tree: _ElementTree[HtmlElement]
    c({{ args }})

- case: html_funcs_accept_str_and_elem
  parametrized:
    - func: c.clean_html
      args: html=s
      rt: 'builtins\.str'
    - func: c.clean_html
      args: b
      rt: 'builtins\.bytes'
    - func: c.clean_html
      args: root
      rt: '[\w\.]+\.HtmlElement'
    - func: c.clean_html
      args: tree
      rt: '[\w\.]+\._ElementTree\[[\w\.]+\.HtmlElement]'
    - func: clean.clean_html
      args: s
      rt: 'builtins\.str'
    - func: clean.clean_html
      args: html=b
      rt: 'builtins\.bytes'
    - func: clean.clean_html
      args: root
      rt: '[\w\.]+\.HtmlElement'
    - func: clean.clean_html
      args: tree
      rt: '[\w\.]+\._ElementTree\[[\w\.]+\.HtmlElement]'
    - func: clean.autolink_html
      args: s
      rt: 'builtins\.str'
    - func: clean.autolink_html
      args: b
      rt: 'builtins\.bytes'
    - func: clean.autolink_html
      args: html=root
      rt: '[\w\.]+\.HtmlElement'
    - func: clean.word_break_html
      args: s
      rt: 'builtins\.str'
    - func: clean.word_break_html
      args: b
      rt: 'builtins\.bytes'
    - func: clean.word_break_html
      args: root
      rt: '[\w\.]+\.HtmlElement'
  main: |
    from lxml.html import clean, HtmlElement
    from lxml.etree import _ElementTree
    c: clean.Cleaner
    s: str
    b: bytes
    root: HtmlElement
    tree: _ElementTree[HtmlElement]
    reveal_type({{ func }}({{ args }}))  # NR: Revealed type is "{{ rt }}"

- case: clean_html_func_badargs
  main: |
    from lxml.html import HtmlElement, clean
    root: HtmlElement
    clean.clean_html()  # E: Too few arguments  [call-arg]
    clean.clean_html(None)  # ER: Value of .+ cannot be "None"  \[type-var]$
    clean.clean_html(root, None)  # ER: Too many arguments.*  \[call-arg]$
    clean.clean_html(badarg=root)  # ER: Unexpected keyword argument .+  \[call-arg]$

- case: other_html_funcs_badargs
  parametrized:
    - func: c.clean_html
      name: clean_html
      is_method: true
    - func: clean.autolink_html
      name: autolink_html
      is_method: false
    - func: clean.word_break_html
      name: word_break_html
      is_method: false
  main: |
    from lxml.html import HtmlElement, clean
    c: clean.Cleaner
    root: HtmlElement
    {{ func }}()  # ER: Missing positional argument "html" .+  \[call-arg]$
    {{ func }}(None)  # ER: Value of .+ cannot be "None"  \[type-var]$
    {{ func }}(badarg=root)  # ER: Unexpected keyword argument "badarg".+  \[call-arg]$

- case: html_funcs_wrong_arg_type
  parametrized:
    - func: autolink_html
      param: link_regexes
      exp_t: "Iterable[Pattern[str]]"
    - func: autolink_html
      param: avoid_elements
      exp_t: "Iterable[str]"
    - func: autolink_html
      param: avoid_hosts
      exp_t: "Iterable[Pattern[str]]"
    - func: autolink_html
      param: avoid_classes
      exp_t: "Iterable[str]"
    - func: word_break_html
      param: max_width
      exp_t: int
    - func: word_break_html
      param: avoid_classes
      exp_t: "Iterable[str]"
    - func: word_break_html
      param: break_character
      exp_t: str
  main: |
    from lxml.html import HtmlElement, clean
    root: HtmlElement
    clean.{{ func }}(root, {{ param }}=None)  # E: Argument "{{ param }}" to "{{ func }}" has incompatible type "None"; expected "{{ exp_t }}"  [arg-type]

- case: inplace_funcs_noargs
  parametrized:
    - func: autolink
    - func: word_break
  main: |
    from lxml.html.clean import autolink, word_break
    from lxml.html import HtmlElement
    root: HtmlElement
    _ = {{ func }}(root)  # E: "{{ func }}" does not return a value  [func-returns-value]

- case: inplace_funcs_badargs
  expect_fail: true
  parametrized:
    - func: autolink
      args: None
    - func: autolink
      args: "root, 1"
    - func: autolink
      args: "root, badarg=None"
    - func: autolink
      args: "badarg=root"
    - func: autolink
      args: "root, link_regexes=single_re"
    - func: word_break
      args: None
    - func: word_break
      args: "root, 'x'"
    - func: word_break
      args: "root, badarg=None"
    - func: word_break
      args: "badarg=root"
    - func: word_break
      args: "root, link_regexes=single_re"
  main: |
    import re
    from lxml.html.clean import autolink, word_break
    from lxml.html import HtmlElement
    single_re = re.compile('x')
    root: HtmlElement
    {{ func }}({{ args }})

- case: autolink_goodargs
  parametrized:
    - args: link_regexes=link_re
    - args: avoid_elements=avoid_el
    - args: avoid_hosts=avoid_hosts
    - args: avoid_classes=avoid_cls
    - args: link_re
    - args: "link_re, avoid_el"
  main: |
    import re
    from lxml.html.clean import autolink
    from lxml.html import HtmlElement
    s: str
    pattern = re.compile(s)
    link_re = [pattern, pattern]
    avoid_el = (s, s)
    avoid_hosts = (pattern, pattern)
    avoid_cls = {s, s}
    root: HtmlElement
    _ = autolink(root, {{ args }})  # E: "autolink" does not return a value  [func-returns-value]

- case: autolink_html_goodargs
  parametrized:
    - args: "html=s, link_regexes=link_re"
    - args: "s, link_re"
    - args: "s, avoid_elements=avoid_el"
    - args: "s, avoid_hosts=avoid_hosts"
    - args: "s, avoid_classes=avoid_cls"
  main: |
    import re
    from lxml.html.clean import autolink_html
    s: str
    pattern = re.compile(s)
    link_re = [pattern, pattern]
    avoid_el = (s, s)
    avoid_hosts = (pattern, pattern)
    avoid_cls = {s, s}
    reveal_type(autolink_html({{ args }}))  # N: Revealed type is "builtins.str"

- case: word_break_goodargs
  parametrized:
    - args: "max_width=40"
    - args: "avoid_classes=avoid_cls"
    - args: "break_character='s'"
    - args: 40
  main: |
    from lxml.html.clean import word_break
    from lxml.html import HtmlElement
    avoid_cls = {'x', 'y'}
    root: HtmlElement
    _ = word_break(root, {{ args }})  # E: "word_break" does not return a value  [func-returns-value]

- case: word_break_html_goodargs
  parametrized:
    - args: "s, 40"
    - args: "s, max_width=40"
    - args: "html=s, avoid_classes=avoid_cls"
    - args: "s, break_character='x'"
  main: |
    from lxml.html.clean import word_break_html
    s: str
    avoid_cls = {'x', 'y'}
    reveal_type(word_break_html({{ args }}))  # N: Revealed type is "builtins.str"
