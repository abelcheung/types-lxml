- case: xpath_create_simple
  main: |
    from lxml import etree
    expr: str
    xpath = etree.XPath(expr)
    reveal_type(xpath)  # N: Revealed type is "lxml.etree._xpath.XPath"

- case: xpath_create_args
  parametrized:
    - args: expr, regexp=True, smart_strings=False
    - args: path=expr, namespaces=ns
    - args: expr, extensions=ext1
    - args: expr, regexp=False, extensions=ext2, namespaces=ns
  main: |
    from lxml.etree import XPath
    expr: str
    s: str
    ns = {s: s}
    def extfunc1(context, a) -> str: ...
    def extfunc2(context, a, b) -> int: ...
    ext1 = [{(None, s): extfunc1}]
    ext2 = {(s, s): extfunc2}
    result = XPath({{ args }})

- case: create_evaluator_matched
  parametrized:
    - ev_type: XPathElementEvaluator
      arg: root
    - ev_type: XPathDocumentEvaluator
      arg: tree
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    evaluator = etree.{{ ev_type }}({{ arg }})
    reveal_type(evaluator)  # N: Revealed type is "lxml.etree._xpath.{{ ev_type }}"

- case: create_evaluator_mismatch
  parametrized:
    - evaluator_t: XPathElementEvaluator
      arg: tree
      wrong_t: "_ElementTree[_Element]"
      expect_t: _Element
    - evaluator_t: XPathDocumentEvaluator
      arg: root
      wrong_t: _Element
      expect_t: "_ElementTree[Any]"
    - evaluator_t: XPathElementEvaluator
      arg: 1
      wrong_t: int
      expect_t: "_Element"
    - evaluator_t: XPathDocumentEvaluator
      arg: 1
      wrong_t: int
      expect_t: "_ElementTree[Any]"
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    _ = etree.{{ evaluator_t }}({{ arg }})  # E: Argument 1 to "{{ evaluator_t }}" has incompatible type "{{ wrong_t }}"; expected "{{ expect_t }}"

- case: create_evaluator_autodetect
  parametrized:
    - arg: root
      rt: lxml.etree._xpath.XPathElementEvaluator
    - arg: tree
      rt: lxml.etree._xpath.XPathDocumentEvaluator
  main: |
    from lxml import etree
    root: etree._Element
    tree: etree._ElementTree[etree._Element]
    evaluator = etree.XPathEvaluator({{ arg }})
    reveal_type(evaluator)  # N: Revealed type is "{{ rt }}"

- case: xpath_create_evaluator_bad_type
  expect_fail: true  # No overload variant
  main: |
    from lxml import etree
    evaluator = etree.XPathEvaluator('fail_here')

- case: xpath_evaluation_result
  main: |
    from lxml import etree
    s: str
    xpath: etree.XPath
    document = etree.XML(s)
    result = xpath(document)
    reveal_type(result)  # N: Revealed type is "Any"
