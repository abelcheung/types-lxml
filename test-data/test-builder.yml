- case: default_element_factory
  main: |
    from lxml.builder import E
    reveal_type(E)  # NR: .+ "[\w\.]+\.ElementMaker\[[\w\.]+\._Element]"$

- case: custom_element_factory
  parametrized:
    - args: namespace=ns
      et: _Element
    - args: makeelement=etree.Element
      et: _Element
    - args: makeelement=etree.Comment
      et: _Comment
    - args: namespace=ns, nsmap=map
      et: _Element
    - args: typemap=typemap
      et: _Element
  main: |
    from typing import Dict
    from lxml.builder import ElementMaker
    from lxml import etree
    ns: str
    map: Dict[str, str]
    def add_text(elem: etree._Element, item: str) -> None: ...
    typemap = {str: add_text}
    E = ElementMaker({{ args }})
    reveal_type(E)  # NR: .+ "[\w\.]+\.ElementMaker\[[\w\.]+\.{{et}}]"$

- case: dunders
  main: |
    from lxml.builder import E
    reveal_type(E.__str__())  # N: Revealed type is "builtins.str"

- case: create_elements
  parametrized:
    - method: foo
    - method: BAR
    - method: __nonExistent__
  main: |
    from lxml.builder import E
    reveal_type(E.{{ method }})  # NR: .+ "def \(.+\) -> [\w\.]+\._Element"$
    reveal_type(E.{{ method }}())  # NR: .+ "[\w\.]+\._Element"$

# Directly taken from lxml.builder docstring example
- case: complex_example
  main: |
    from lxml.builder import E
    from lxml import etree as ET

    A = E.a
    I = E.i
    B = E.b

    def CLASS(v):
      return {'class': v}

    page = (
      E.html(
        E.head(
          E.title("This is a sample document")
        ),
        E.body(
          E.h1("Hello!", CLASS("title")),
          E.p("This is a paragraph with ", B("bold"), " text in it!"),
          E.p("This is another paragraph, with a ",
              A("link", href="http://www.python.org"), "."),
          E.p("Here are some reserved characters: <spam&egg>."),
          ET.XML("<p>And finally, here is an embedded XHTML fragment.</p>"),
        )
      )
    )
    reveal_type(page)  # NR: .+ "[\w\.]+\._Element"$

- case: html_builder_create_elements
  parametrized:
    - method: abbr
    - method: H5
    - method: __nonExistent__
  main: |
    from lxml.html.builder import E
    reveal_type(E.{{ method }})  # NR: Revealed type is "def \(\*Any, \*\*Any\) -> [\w\.]+\.HtmlElement"
    reveal_type(E.{{ method }}())  # NR: Revealed type is "[\w\.]+\.HtmlElement"

- case: html_builder_existing_tag
  main: |
    from lxml.html.builder import TABLE, TR, TD
    reveal_type(TD)  # NR: Revealed type is "def \(\*Any, \*\*Any\) -> [\w\.]+\.HtmlElement"
    reveal_type(TD("content", id="cell"))  # NR: Revealed type is "[\w\.]+\.HtmlElement"
    result = TABLE(TR(TD("content")))
    reveal_type(result)  # NR: Revealed type is "[\w\.]+\.HtmlElement"

# Modified from html.builder docstring example
- case: html_builder_complex_example
  main: |
    from lxml.html.builder import *
    html = HTML(
      HEAD( TITLE("Hello World") ),
      BODY( CLASS("main"),
        H1("Hello World !"),
        A("Welcome", ATTR([("href", "http://welcome.home")])),
        id="content",
      )
    )
    reveal_type(html)  # NR: Revealed type is "[\w\.]+\.HtmlElement"
