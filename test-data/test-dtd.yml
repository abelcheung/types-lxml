#
# Methods and properties of superclass of DTD (etree._Validator)
# are moved to test-validator.yml
#

- case: constructor
  parametrized:
    - args: filename
    - args: file=path
    - args: fileio
    - args: external_id=dtd_id
  main: |
    from pathlib import PosixPath
    from lxml.etree import DTD
    filename: str
    path: PosixPath
    fileio = open('file', 'r')
    dtd_id: bytes
    reveal_type(DTD({{ args }}))  # N: Revealed type is "lxml.etree._dtd.DTD"

- case: constructor_noargs
  expect_fail: true
  main: |
    from lxml.etree import DTD
    dtd = DTD()

# str not supported as of lxml 4.8
- case: constructor_badargs
  expect_fail: true
  parametrized:
    - args: 1
    - args: "None, 1"
    - args: "None, badarg=b"
    - args: "external_id=s"
  main: |
    from lxml.etree import DTD
    s: str
    b: bytes
    dtd = DTD({{ args }})

- case: include_file
  skip: True
  files: &INC
    - path: dtdtest.py
      content: |
        from lxml.etree import DTD, _Element, _ElementTree
        dtd: DTD
        dtd_el   = dtd.elements()[0]
        dtd_ent  = dtd.entities()[0]
        dtd_attr = dtd_el.attributes()[0]
        root: _Element
        tree: _ElementTree[_Element]
  main:

- case: dtd_properties
  files: *INC
  parametrized:
    - prop: name
    - prop: external_id
    - prop: system_url
  main: |
    from dtdtest import dtd
    reveal_type(dtd.{{ prop }})  # N: Revealed type is "Union[builtins.str, None]"
    dtd.{{ prop }} = dtd.{{ prop }}  # E: Property "{{ prop }}" defined in "DTD" is read-only  [misc]


- case: dtd_methods
  files: *INC
  parametrized:
    - func: iterelements
      rt: "typing.Iterator[lxml.etree._dtd._DTDElementDecl]"
    - func: elements
      rt: "builtins.list[lxml.etree._dtd._DTDElementDecl]"
    - func: iterentities
      rt: "typing.Iterator[lxml.etree._dtd._DTDEntityDecl]"
    - func: entities
      rt: "builtins.list[lxml.etree._dtd._DTDEntityDecl]"
  main: |
    from dtdtest import dtd
    reveal_type(dtd.{{ func }}())  # N: Revealed type is "{{ rt }}"

- case: dtd_methods_badargs
  files: *INC
  parametrized:
    - func: iterelements
    - func: elements
    - func: iterentities
    - func: entities
  main: |
    from dtdtest import dtd
    _ = dtd.{{ func }}(None)  # E: Too many arguments for "{{ func }}" of "DTD"  [call-arg]
    _ = dtd.{{ func }}(badarg=None)  # E: Unexpected keyword argument "badarg" for "{{ func }}" of "DTD"  [call-arg]

- case: dtd_entity_properties
  files: *INC
  parametrized:
    - prop: name
    - prop: orig
    - prop: content
    - prop: system_url
  main: |
    from dtdtest import dtd_ent
    reveal_type(dtd_ent.{{ prop }})  # N: Revealed type is "Union[builtins.str, None]"
    dtd_ent.{{ prop }} = dtd_ent.{{ prop }}  # E: Property "{{ prop }}" defined in "_DTDEntityDecl" is read-only  [misc]

- case: dtd_element_properties
  files: *INC
  parametrized:
    - prop: name
      rt: "Union[builtins.str, None]"
    - prop: prefix
      rt: "Union[builtins.str, None]"
    - prop: type
      rt: "Union[Literal['undefined'], Literal['empty'], Literal['any'], Literal['mixed'], Literal['element'], None]"
    - prop: content
      rt: "Union[lxml.etree._dtd._DTDElementContentDecl, None]"
  main: |
    from dtdtest import dtd_el
    reveal_type(dtd_el.{{ prop }})  # N: Revealed type is "{{ rt }}"
    dtd_el.{{ prop }} = dtd_el.{{ prop }}  # E: Property "{{ prop }}" defined in "_DTDElementDecl" is read-only  [misc]

- case: dtd_element_methods
  files: *INC
  parametrized:
    - func: iterattributes
      rt: "typing.Iterator[lxml.etree._dtd._DTDAttributeDecl]"
    - func: attributes
      rt: "builtins.list[lxml.etree._dtd._DTDAttributeDecl]"
  main: |
    from dtdtest import dtd_el
    reveal_type(dtd_el.{{ func }}())  # N: Revealed type is "{{ rt }}"

- case: dtd_element_methods_badargs
  files: *INC
  parametrized:
    - func: iterattributes
    - func: attributes
  main: |
    from dtdtest import dtd_el
    _ = dtd_el.{{ func }}(None)  # E: Too many arguments for "{{ func }}" of "_DTDElementDecl"  [call-arg]
    _ = dtd_el.{{ func }}(badarg=None)  # E: Unexpected keyword argument "badarg" for "{{ func }}" of "_DTDElementDecl"  [call-arg]

- case: dtd_attrs_properties
  files: *INC
  parametrized:
    - prop: name
      rt: "Union[builtins.str, None]"
    - prop: elemname
      rt: "Union[builtins.str, None]"
    - prop: prefix
      rt: "Union[builtins.str, None]"
    - prop: type
      rt: "Union[Literal['cdata'], Literal['id'], Literal['idref'], Literal['idrefs'], Literal['entity'], Literal['entities'], Literal['nmtoken'], Literal['nmtokens'], Literal['enumeration'], Literal['notation'], None]"
    - prop: default
      rt: "Union[Literal['none'], Literal['required'], Literal['implied'], Literal['fixed'], None]"
    - prop: default_value
      rt: "Union[builtins.str, None]"
  main: |
    from dtdtest import dtd_attr
    reveal_type(dtd_attr.{{ prop }})  # N: Revealed type is "{{ rt }}"
    dtd_attr.{{ prop }} = dtd_attr.{{ prop }}  # E: Property "{{ prop }}" defined in "_DTDAttributeDecl" is read-only  [misc]

- case: dtd_attrs_methods
  files: *INC
  parametrized:
    - func: itervalues
      rt: "typing.Iterator[builtins.str]"
    - func: values
      rt: "builtins.list[builtins.str]"
  main: |
    from dtdtest import dtd_attr
    reveal_type(dtd_attr.{{ func }}())  # N: Revealed type is "{{ rt }}"

- case: dtd_attrs_methods_badargs
  files: *INC
  parametrized:
    - func: itervalues
    - func: values
  main: |
    from dtdtest import dtd_attr
    _ = dtd_attr.{{ func }}(None)  # E: Too many arguments for "{{ func }}" of "_DTDAttributeDecl"  [call-arg]
    _ = dtd_attr.{{ func }}(badarg=None)  # E: Unexpected keyword argument "badarg" for "{{ func }}" of "_DTDAttributeDecl"  [call-arg]

- case: dtd_el_content_properties
  files: *INC
  parametrized:
    - prop: name
      rt: "Union[builtins.str, None]"
    - prop: type
      rt: "Union[Literal['pcdata'], Literal['element'], Literal['seq'], Literal['or'], None]"
    - prop: occur
      rt: "Union[Literal['once'], Literal['opt'], Literal['mul'], Literal['plus'], None]"
    - prop: left
      rt: "Union[lxml.etree._dtd._DTDElementContentDecl, None]"
    - prop: right
      rt: "Union[lxml.etree._dtd._DTDElementContentDecl, None]"
  main: |
    from dtdtest import dtd_el
    content = dtd_el.content
    assert content is not None
    reveal_type(content.{{ prop }})  # N: Revealed type is "{{ rt }}"
